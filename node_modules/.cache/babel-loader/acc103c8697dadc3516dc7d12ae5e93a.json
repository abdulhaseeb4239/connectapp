{"ast":null,"code":"import { ClarityType } from '../clarityValue';\nimport { isClarityName } from '../../utils';\n\nfunction tupleCV(data) {\n  for (const key in data) {\n    if (!isClarityName(key)) {\n      throw new Error(`\"${key}\" is not a valid Clarity name`);\n    }\n  }\n\n  return {\n    type: ClarityType.Tuple,\n    data\n  };\n}\n\nexport { tupleCV };","map":{"version":3,"sources":["../../../../src/clarity/types/tupleCV.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA0C,iBAA1C;AACA,SAAS,aAAT,QAA8B,aAA9B;;AASA,SAAS,OAAT,CAAwD,IAAxD,EAA0E;AACxE,OAAK,MAAM,GAAX,IAAkB,IAAlB,EAAwB;AACtB,QAAI,CAAC,aAAa,CAAC,GAAD,CAAlB,EAAyB;AACvB,YAAM,IAAI,KAAJ,CAAU,IAAI,GAAG,+BAAjB,CAAN;AACD;AACF;;AAED,SAAO;AAAE,IAAA,IAAI,EAAE,WAAW,CAAC,KAApB;AAA2B,IAAA;AAA3B,GAAP;AACD;;AAED,SAAkB,OAAlB","sourceRoot":"","sourcesContent":["import { ClarityType } from '../clarityValue';\nimport { isClarityName } from '../../utils';\nfunction tupleCV(data) {\n    for (const key in data) {\n        if (!isClarityName(key)) {\n            throw new Error(`\"${key}\" is not a valid Clarity name`);\n        }\n    }\n    return { type: ClarityType.Tuple, data };\n}\nexport { tupleCV };\n//# sourceMappingURL=tupleCV.js.map"]},"metadata":{},"sourceType":"module"}