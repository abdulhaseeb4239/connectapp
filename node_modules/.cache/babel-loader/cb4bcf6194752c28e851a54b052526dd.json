{"ast":null,"code":"import { InvalidDIDError } from '@stacks/common';\nexport function makeDIDFromAddress(address) {\n  return `did:btc-addr:${address}`;\n}\nexport function makeDIDFromPublicKey(publicKey) {\n  return `did:ecdsa-pub:${publicKey}`;\n}\nexport function getDIDType(decentralizedID) {\n  const didParts = decentralizedID.split(':');\n\n  if (didParts.length !== 3) {\n    throw new InvalidDIDError('Decentralized IDs must have 3 parts');\n  }\n\n  if (didParts[0].toLowerCase() !== 'did') {\n    throw new InvalidDIDError('Decentralized IDs must start with \"did\"');\n  }\n\n  return didParts[1].toLowerCase();\n}\nexport function getAddressFromDID(decentralizedID) {\n  if (decentralizedID) {\n    const didType = getDIDType(decentralizedID);\n\n    if (didType === 'btc-addr') {\n      return decentralizedID.split(':')[2];\n    } else {\n      return undefined;\n    }\n  }\n\n  return undefined;\n}","map":{"version":3,"sources":["../../src/dids.ts"],"names":[],"mappings":"AAAA,SAAS,eAAT,QAAgC,gBAAhC;AAKA,OAAM,SAAU,kBAAV,CAA6B,OAA7B,EAA4C;AAChD,SAAO,gBAAgB,OAAO,EAA9B;AACD;AAKD,OAAM,SAAU,oBAAV,CAA+B,SAA/B,EAAgD;AACpD,SAAO,iBAAiB,SAAS,EAAjC;AACD;AAKD,OAAM,SAAU,UAAV,CAAqB,eAArB,EAA4C;AAChD,QAAM,QAAQ,GAAG,eAAe,CAAC,KAAhB,CAAsB,GAAtB,CAAjB;;AAEA,MAAI,QAAQ,CAAC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,UAAM,IAAI,eAAJ,CAAoB,qCAApB,CAAN;AACD;;AAED,MAAI,QAAQ,CAAC,CAAD,CAAR,CAAY,WAAZ,OAA8B,KAAlC,EAAyC;AACvC,UAAM,IAAI,eAAJ,CAAoB,yCAApB,CAAN;AACD;;AAED,SAAO,QAAQ,CAAC,CAAD,CAAR,CAAY,WAAZ,EAAP;AACD;AAKD,OAAM,SAAU,iBAAV,CAA4B,eAA5B,EAAoD;AACxD,MAAI,eAAJ,EAAqB;AACnB,UAAM,OAAO,GAAG,UAAU,CAAC,eAAD,CAA1B;;AACA,QAAI,OAAO,KAAK,UAAhB,EAA4B;AAC1B,aAAO,eAAe,CAAC,KAAhB,CAAsB,GAAtB,EAA2B,CAA3B,CAAP;AACD,KAFD,MAEO;AACL,aAAO,SAAP;AACD;AACF;;AACD,SAAO,SAAP;AACD","sourceRoot":"","sourcesContent":["import { InvalidDIDError } from '@stacks/common';\nexport function makeDIDFromAddress(address) {\n    return `did:btc-addr:${address}`;\n}\nexport function makeDIDFromPublicKey(publicKey) {\n    return `did:ecdsa-pub:${publicKey}`;\n}\nexport function getDIDType(decentralizedID) {\n    const didParts = decentralizedID.split(':');\n    if (didParts.length !== 3) {\n        throw new InvalidDIDError('Decentralized IDs must have 3 parts');\n    }\n    if (didParts[0].toLowerCase() !== 'did') {\n        throw new InvalidDIDError('Decentralized IDs must start with \"did\"');\n    }\n    return didParts[1].toLowerCase();\n}\nexport function getAddressFromDID(decentralizedID) {\n    if (decentralizedID) {\n        const didType = getDIDType(decentralizedID);\n        if (didType === 'btc-addr') {\n            return decentralizedID.split(':')[2];\n        }\n        else {\n            return undefined;\n        }\n    }\n    return undefined;\n}\n//# sourceMappingURL=dids.js.map"]},"metadata":{},"sourceType":"module"}