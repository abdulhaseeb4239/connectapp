{"ast":null,"code":"import { Buffer } from '@stacks/common';\nimport { ClarityType, intCV, uintCV, bufferCV, trueCV, falseCV, standardPrincipalCVFromAddress, contractPrincipalCVFromAddress, responseOkCV, responseErrorCV, noneCV, someCV, listCV, tupleCV } from '.';\nimport { BufferReader } from '../bufferReader';\nimport { deserializeAddress, deserializeLPString } from '../types';\nimport { DeserializationError } from '../errors';\nimport { stringAsciiCV, stringUtf8CV } from './types/stringCV';\nexport default function deserializeCV(serializedClarityValue) {\n  let bufferReader;\n\n  if (typeof serializedClarityValue === 'string') {\n    const hasHexPrefix = serializedClarityValue.slice(0, 2).toLowerCase() === '0x';\n    bufferReader = new BufferReader(Buffer.from(hasHexPrefix ? serializedClarityValue.slice(2) : serializedClarityValue, 'hex'));\n  } else if (Buffer.isBuffer(serializedClarityValue)) {\n    bufferReader = new BufferReader(serializedClarityValue);\n  } else {\n    bufferReader = serializedClarityValue;\n  }\n\n  const type = bufferReader.readUInt8Enum(ClarityType, n => {\n    throw new DeserializationError(`Cannot recognize Clarity Type: ${n}`);\n  });\n\n  switch (type) {\n    case ClarityType.Int:\n      return intCV(bufferReader.readBuffer(16));\n\n    case ClarityType.UInt:\n      return uintCV(bufferReader.readBuffer(16));\n\n    case ClarityType.Buffer:\n      const bufferLength = bufferReader.readUInt32BE();\n      return bufferCV(bufferReader.readBuffer(bufferLength));\n\n    case ClarityType.BoolTrue:\n      return trueCV();\n\n    case ClarityType.BoolFalse:\n      return falseCV();\n\n    case ClarityType.PrincipalStandard:\n      const sAddress = deserializeAddress(bufferReader);\n      return standardPrincipalCVFromAddress(sAddress);\n\n    case ClarityType.PrincipalContract:\n      const cAddress = deserializeAddress(bufferReader);\n      const contractName = deserializeLPString(bufferReader);\n      return contractPrincipalCVFromAddress(cAddress, contractName);\n\n    case ClarityType.ResponseOk:\n      return responseOkCV(deserializeCV(bufferReader));\n\n    case ClarityType.ResponseErr:\n      return responseErrorCV(deserializeCV(bufferReader));\n\n    case ClarityType.OptionalNone:\n      return noneCV();\n\n    case ClarityType.OptionalSome:\n      return someCV(deserializeCV(bufferReader));\n\n    case ClarityType.List:\n      const listLength = bufferReader.readUInt32BE();\n      const listContents = [];\n\n      for (let i = 0; i < listLength; i++) {\n        listContents.push(deserializeCV(bufferReader));\n      }\n\n      return listCV(listContents);\n\n    case ClarityType.Tuple:\n      const tupleLength = bufferReader.readUInt32BE();\n      const tupleContents = {};\n\n      for (let i = 0; i < tupleLength; i++) {\n        const clarityName = deserializeLPString(bufferReader).content;\n\n        if (clarityName === undefined) {\n          throw new DeserializationError('\"content\" is undefined');\n        }\n\n        tupleContents[clarityName] = deserializeCV(bufferReader);\n      }\n\n      return tupleCV(tupleContents);\n\n    case ClarityType.StringASCII:\n      const asciiStrLen = bufferReader.readUInt32BE();\n      const asciiStr = bufferReader.readBuffer(asciiStrLen).toString('ascii');\n      return stringAsciiCV(asciiStr);\n\n    case ClarityType.StringUTF8:\n      const utf8StrLen = bufferReader.readUInt32BE();\n      const utf8Str = bufferReader.readBuffer(utf8StrLen).toString('utf8');\n      return stringUtf8CV(utf8Str);\n\n    default:\n      throw new DeserializationError('Unable to deserialize Clarity Value from buffer. Could not find valid Clarity Type.');\n  }\n}","map":{"version":3,"sources":["../../../src/clarity/deserialize.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Buffer } from '@stacks/common';\nimport { ClarityType, intCV, uintCV, bufferCV, trueCV, falseCV, standardPrincipalCVFromAddress, contractPrincipalCVFromAddress, responseOkCV, responseErrorCV, noneCV, someCV, listCV, tupleCV, } from '.';\nimport { BufferReader } from '../bufferReader';\nimport { deserializeAddress, deserializeLPString } from '../types';\nimport { DeserializationError } from '../errors';\nimport { stringAsciiCV, stringUtf8CV } from './types/stringCV';\nexport default function deserializeCV(serializedClarityValue) {\n    let bufferReader;\n    if (typeof serializedClarityValue === 'string') {\n        const hasHexPrefix = serializedClarityValue.slice(0, 2).toLowerCase() === '0x';\n        bufferReader = new BufferReader(Buffer.from(hasHexPrefix ? serializedClarityValue.slice(2) : serializedClarityValue, 'hex'));\n    }\n    else if (Buffer.isBuffer(serializedClarityValue)) {\n        bufferReader = new BufferReader(serializedClarityValue);\n    }\n    else {\n        bufferReader = serializedClarityValue;\n    }\n    const type = bufferReader.readUInt8Enum(ClarityType, n => {\n        throw new DeserializationError(`Cannot recognize Clarity Type: ${n}`);\n    });\n    switch (type) {\n        case ClarityType.Int:\n            return intCV(bufferReader.readBuffer(16));\n        case ClarityType.UInt:\n            return uintCV(bufferReader.readBuffer(16));\n        case ClarityType.Buffer:\n            const bufferLength = bufferReader.readUInt32BE();\n            return bufferCV(bufferReader.readBuffer(bufferLength));\n        case ClarityType.BoolTrue:\n            return trueCV();\n        case ClarityType.BoolFalse:\n            return falseCV();\n        case ClarityType.PrincipalStandard:\n            const sAddress = deserializeAddress(bufferReader);\n            return standardPrincipalCVFromAddress(sAddress);\n        case ClarityType.PrincipalContract:\n            const cAddress = deserializeAddress(bufferReader);\n            const contractName = deserializeLPString(bufferReader);\n            return contractPrincipalCVFromAddress(cAddress, contractName);\n        case ClarityType.ResponseOk:\n            return responseOkCV(deserializeCV(bufferReader));\n        case ClarityType.ResponseErr:\n            return responseErrorCV(deserializeCV(bufferReader));\n        case ClarityType.OptionalNone:\n            return noneCV();\n        case ClarityType.OptionalSome:\n            return someCV(deserializeCV(bufferReader));\n        case ClarityType.List:\n            const listLength = bufferReader.readUInt32BE();\n            const listContents = [];\n            for (let i = 0; i < listLength; i++) {\n                listContents.push(deserializeCV(bufferReader));\n            }\n            return listCV(listContents);\n        case ClarityType.Tuple:\n            const tupleLength = bufferReader.readUInt32BE();\n            const tupleContents = {};\n            for (let i = 0; i < tupleLength; i++) {\n                const clarityName = deserializeLPString(bufferReader).content;\n                if (clarityName === undefined) {\n                    throw new DeserializationError('\"content\" is undefined');\n                }\n                tupleContents[clarityName] = deserializeCV(bufferReader);\n            }\n            return tupleCV(tupleContents);\n        case ClarityType.StringASCII:\n            const asciiStrLen = bufferReader.readUInt32BE();\n            const asciiStr = bufferReader.readBuffer(asciiStrLen).toString('ascii');\n            return stringAsciiCV(asciiStr);\n        case ClarityType.StringUTF8:\n            const utf8StrLen = bufferReader.readUInt32BE();\n            const utf8Str = bufferReader.readBuffer(utf8StrLen).toString('utf8');\n            return stringUtf8CV(utf8Str);\n        default:\n            throw new DeserializationError('Unable to deserialize Clarity Value from buffer. Could not find valid Clarity Type.');\n    }\n}\n//# sourceMappingURL=deserialize.js.map"]},"metadata":{},"sourceType":"module"}