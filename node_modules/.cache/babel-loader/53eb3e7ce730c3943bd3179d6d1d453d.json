{"ast":null,"code":"import { Logger } from './logger.esm.js';\nvar BLOCKSTACK_HANDLER = 'blockstack';\n\nfunction nextYear() {\n  return new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n}\n\nfunction nextMonth() {\n  return new Date(new Date().setMonth(new Date().getMonth() + 1));\n}\n\nfunction nextHour() {\n  return new Date(new Date().setHours(new Date().getHours() + 1));\n}\n\nfunction megabytesToBytes(megabytes) {\n  if (!Number.isFinite(megabytes)) {\n    return 0;\n  }\n\n  return Math.floor(megabytes * 1024 * 1024);\n}\n\nfunction getAesCbcOutputLength(inputByteLength) {\n  var cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\n  return cipherTextLength;\n}\n\nfunction getBase64OutputLength(inputByteLength) {\n  var encodedLength = Math.ceil(inputByteLength / 3) * 4;\n  return encodedLength;\n}\n\nfunction updateQueryStringParameter(uri, key, value) {\n  var re = new RegExp(\"([?&])\" + key + \"=.*?(&|$)\", 'i');\n  var separator = uri.indexOf('?') !== -1 ? '&' : '?';\n\n  if (uri.match(re)) {\n    return uri.replace(re, \"$1\" + key + \"=\" + value + \"$2\");\n  } else {\n    return \"\" + uri + separator + key + \"=\" + value;\n  }\n}\n\nfunction isLaterVersion(v1, v2) {\n  if (v1 === undefined || v1 === '') {\n    v1 = '0.0.0';\n  }\n\n  if (v2 === undefined || v1 === '') {\n    v2 = '0.0.0';\n  }\n\n  var v1tuple = v1.split('.').map(function (x) {\n    return parseInt(x, 10);\n  });\n  var v2tuple = v2.split('.').map(function (x) {\n    return parseInt(x, 10);\n  });\n\n  for (var index = 0; index < v2.length; index++) {\n    if (index >= v1.length) {\n      v2tuple.push(0);\n    }\n\n    if (v1tuple[index] < v2tuple[index]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction makeUUID4() {\n  var d = new Date().getTime();\n\n  if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n    d += performance.now();\n  }\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n    var r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : r & 0x3 | 0x8).toString(16);\n  });\n}\n\nfunction isSameOriginAbsoluteUrl(uri1, uri2) {\n  try {\n    var parseUrl;\n\n    if (typeof URL !== 'undefined') {\n      parseUrl = function parseUrl(url) {\n        return new URL(url);\n      };\n    } else {\n      try {\n        var nodeUrl = require('url').URL;\n\n        parseUrl = function parseUrl(url) {\n          return new nodeUrl(url);\n        };\n      } catch (error) {\n        console.log(error);\n        throw new Error('Global URL class is not available');\n      }\n    }\n\n    var parsedUri1 = parseUrl(uri1);\n    var parsedUri2 = parseUrl(uri2);\n    var port1 = parseInt(parsedUri1.port || '0', 10) | 0 || (parsedUri1.protocol === 'https:' ? 443 : 80);\n    var port2 = parseInt(parsedUri2.port || '0', 10) | 0 || (parsedUri2.protocol === 'https:' ? 443 : 80);\n    var match = {\n      scheme: parsedUri1.protocol === parsedUri2.protocol,\n      hostname: parsedUri1.hostname === parsedUri2.hostname,\n      port: port1 === port2,\n      absolute: (uri1.includes('http://') || uri1.includes('https://')) && (uri2.includes('http://') || uri2.includes('https://'))\n    };\n    return match.scheme && match.hostname && match.port && match.absolute;\n  } catch (error) {\n    console.log(error);\n    console.log('Parsing error in same URL origin check');\n    return false;\n  }\n}\n\nfunction getGlobalScope() {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n\n  if (typeof global !== 'undefined') {\n    return global;\n  }\n\n  throw new Error('Unexpected runtime environment - no supported global scope (`window`, `self`, `global`) available');\n}\n\nfunction getAPIUsageErrorMessage(scopeObject, apiName, usageDesc) {\n  if (usageDesc) {\n    return \"Use of '\" + usageDesc + \"' requires `\" + apiName + \"` which is unavailable on the '\" + scopeObject + \"' object within the currently executing environment.\";\n  } else {\n    return \"`\" + apiName + \"` is unavailable on the '\" + scopeObject + \"' object within the currently executing environment.\";\n  }\n}\n\nfunction getGlobalObject(name, _temp) {\n  var _ref = _temp === void 0 ? {} : _temp,\n      throwIfUnavailable = _ref.throwIfUnavailable,\n      usageDesc = _ref.usageDesc,\n      returnEmptyObject = _ref.returnEmptyObject;\n\n  var globalScope = undefined;\n\n  try {\n    globalScope = getGlobalScope();\n\n    if (globalScope) {\n      var obj = globalScope[name];\n\n      if (obj) {\n        return obj;\n      }\n    }\n  } catch (error) {\n    Logger.error(\"Error getting object '\" + name + \"' from global scope '\" + globalScope + \"': \" + error);\n  }\n\n  if (throwIfUnavailable) {\n    var errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n    Logger.error(errMsg);\n    throw new Error(errMsg);\n  }\n\n  if (returnEmptyObject) {\n    return {};\n  }\n\n  return undefined;\n}\n\nfunction getGlobalObjects(names, _temp2) {\n  var _ref2 = _temp2 === void 0 ? {} : _temp2,\n      throwIfUnavailable = _ref2.throwIfUnavailable,\n      usageDesc = _ref2.usageDesc,\n      returnEmptyObject = _ref2.returnEmptyObject;\n\n  var globalScope;\n\n  try {\n    globalScope = getGlobalScope();\n  } catch (error) {\n    Logger.error(\"Error getting global scope: \" + error);\n\n    if (throwIfUnavailable) {\n      var errMsg = getAPIUsageErrorMessage(globalScope, names[0].toString(), usageDesc);\n      Logger.error(errMsg);\n      throw errMsg;\n    } else if (returnEmptyObject) {\n      globalScope = {};\n    }\n  }\n\n  var result = {};\n\n  for (var i = 0; i < names.length; i++) {\n    var name = names[i];\n\n    try {\n      if (globalScope) {\n        var obj = globalScope[name];\n\n        if (obj) {\n          result[name] = obj;\n        } else if (throwIfUnavailable) {\n          var _errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n\n          Logger.error(_errMsg);\n          throw new Error(_errMsg);\n        } else if (returnEmptyObject) {\n          result[name] = {};\n        }\n      }\n    } catch (error) {\n      if (throwIfUnavailable) {\n        var _errMsg2 = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n\n        Logger.error(_errMsg2);\n        throw new Error(_errMsg2);\n      }\n    }\n  }\n\n  return result;\n}\n\nexport { BLOCKSTACK_HANDLER, getAesCbcOutputLength, getBase64OutputLength, getGlobalObject, getGlobalObjects, getGlobalScope, isLaterVersion, isSameOriginAbsoluteUrl, makeUUID4, megabytesToBytes, nextHour, nextMonth, nextYear, updateQueryStringParameter };","map":{"version":3,"sources":["../src/utils.ts"],"names":["BLOCKSTACK_HANDLER","nextYear","nextMonth","nextHour","megabytesToBytes","megabytes","Number","Math","getAesCbcOutputLength","inputByteLength","cipherTextLength","getBase64OutputLength","encodedLength","updateQueryStringParameter","uri","key","value","re","separator","isLaterVersion","v1","v2","v1tuple","parseInt","v2tuple","index","makeUUID4","d","performance","r","c","isSameOriginAbsoluteUrl","uri1","uri2","parseUrl","nodeUrl","require","console","parsedUri1","parsedUri2","port1","port2","match","scheme","hostname","port","absolute","getGlobalScope","getGlobalObject","name","throwIfUnavailable","usageDesc","returnEmptyObject","globalScope","obj","Logger","errMsg","getAPIUsageErrorMessage","getGlobalObjects","names","result","i"],"mappings":";IAKaA,kBAAkB,GAAG,Y;;SAOlBC,Q,GAAAA;AACd,SAAO,IAAA,IAAA,CAAS,IAAA,IAAA,GAAA,WAAA,CAAuB,IAAA,IAAA,GAAA,WAAA,KAAvC,CAAgB,CAAT,CAAP;AACD;;SAOeC,S,GAAAA;AACd,SAAO,IAAA,IAAA,CAAS,IAAA,IAAA,GAAA,QAAA,CAAoB,IAAA,IAAA,GAAA,QAAA,KAApC,CAAgB,CAAT,CAAP;AACD;;SAOeC,Q,GAAAA;AACd,SAAO,IAAA,IAAA,CAAS,IAAA,IAAA,GAAA,QAAA,CAAoB,IAAA,IAAA,GAAA,QAAA,KAApC,CAAgB,CAAT,CAAP;AACD;;SAMeC,gB,CAAiBC,S,EAAAA;AAC/B,MAAI,CAACC,MAAM,CAANA,QAAAA,CAAL,SAAKA,CAAL,EAAiC;AAC/B,WAAA,CAAA;AACD;;AACD,SAAOC,IAAI,CAAJA,KAAAA,CAAWF,SAAS,GAATA,IAAAA,GAAlB,IAAOE,CAAP;AACD;;SAOeC,qB,CAAsBC,e,EAAAA;AAEpC,MAAMC,gBAAgB,GAAG,CAACH,IAAI,CAAJA,KAAAA,CAAWE,eAAe,GAA1BF,EAAAA,IAAD,CAAA,IAAzB,EAAA;AACA,SAAA,gBAAA;AACD;;SAQeI,qB,CAAsBF,e,EAAAA;AACpC,MAAMG,aAAa,GAAGL,IAAI,CAAJA,IAAAA,CAAUE,eAAe,GAAzBF,CAAAA,IAAtB,CAAA;AACA,SAAA,aAAA;AACD;;SAQeM,0B,CAA2BC,G,EAAaC,G,EAAaC,K,EAAAA;AACnE,MAAMC,EAAE,GAAG,IAAA,MAAA,CAAA,WAAA,GAAA,GAAA,WAAA,EAAX,GAAW,CAAX;AACA,MAAMC,SAAS,GAAGJ,GAAG,CAAHA,OAAAA,CAAAA,GAAAA,MAAqB,CAArBA,CAAAA,GAAAA,GAAAA,GAAlB,GAAA;;AACA,MAAIA,GAAG,CAAHA,KAAAA,CAAJ,EAAIA,CAAJ,EAAmB;AACjB,WAAOA,GAAG,CAAHA,OAAAA,CAAAA,EAAAA,EAAAA,OAAAA,GAAAA,GAAAA,GAAAA,GAAAA,KAAAA,GAAP,IAAOA,CAAP;AADF,GAAA,MAEO;AACL,WAAA,KAAA,GAAA,GAAA,SAAA,GAAA,GAAA,GAAA,GAAA,GAAA,KAAA;AACD;AACF;;SAWeK,c,CAAeC,E,EAAYC,E,EAAAA;AACzC,MAAID,EAAE,KAAFA,SAAAA,IAAoBA,EAAE,KAA1B,EAAA,EAAmC;AACjCA,IAAAA,EAAE,GAAFA,OAAAA;AACD;;AAED,MAAIC,EAAE,KAAFA,SAAAA,IAAoBD,EAAE,KAA1B,EAAA,EAAmC;AACjCC,IAAAA,EAAE,GAAFA,OAAAA;AACD;;AAED,MAAMC,OAAO,GAAG,EAAE,CAAF,KAAA,CAAA,GAAA,EAAA,GAAA,CAAkB,UAAA,CAAA,EAAC;AAAA,WAAIC,QAAQ,CAAA,CAAA,EAAZ,EAAY,CAAZ;AAAnC,GAAgB,CAAhB;AACA,MAAMC,OAAO,GAAG,EAAE,CAAF,KAAA,CAAA,GAAA,EAAA,GAAA,CAAkB,UAAA,CAAA,EAAC;AAAA,WAAID,QAAQ,CAAA,CAAA,EAAZ,EAAY,CAAZ;AAAnC,GAAgB,CAAhB;;AAEA,OAAK,IAAIE,KAAK,GAAd,CAAA,EAAoBA,KAAK,GAAGJ,EAAE,CAA9B,MAAA,EAAuCI,KAAvC,EAAA,EAAgD;AAC9C,QAAIA,KAAK,IAAIL,EAAE,CAAf,MAAA,EAAwB;AACtBI,MAAAA,OAAO,CAAPA,IAAAA,CAAAA,CAAAA;AACD;;AACD,QAAIF,OAAO,CAAPA,KAAO,CAAPA,GAAiBE,OAAO,CAA5B,KAA4B,CAA5B,EAAqC;AACnC,aAAA,KAAA;AACD;AACF;;AACD,SAAA,IAAA;AACD;;SAOeE,S,GAAAA;AACd,MAAIC,CAAC,GAAG,IAAA,IAAA,GAAR,OAAQ,EAAR;;AACA,MAAI,OAAA,WAAA,KAAA,WAAA,IAAsC,OAAOC,WAAW,CAAlB,GAAA,KAA1C,UAAA,EAAiF;AAC/ED,IAAAA,CAAC,IAAIC,WAAW,CAAhBD,GAAKC,EAALD;AACD;;AACD,SAAO,uCAAA,OAAA,CAAA,OAAA,EAAwD,UAAA,CAAA,EAAC;AAC9D,QAAME,CAAC,GAAG,CAACF,CAAC,GAAGpB,IAAI,CAAJA,MAAAA,KAAL,EAAA,IAAA,EAAA,GAAV,CAAA;AACAoB,IAAAA,CAAC,GAAGpB,IAAI,CAAJA,KAAAA,CAAWoB,CAAC,GAAhBA,EAAIpB,CAAJoB;AACA,WAAO,CAACG,CAAC,KAADA,GAAAA,GAAAA,CAAAA,GAAiBD,CAAC,GAAF,GAACA,GAAlB,GAAA,EAAA,QAAA,CAAP,EAAO,CAAP;AAHF,GAAO,CAAP;AAKD;;SAUeE,uB,CAAwBC,I,EAAcC,I,EAAAA;AACpD,MAAI;AAIF,QAAA,QAAA;;AACA,QAAI,OAAA,GAAA,KAAJ,WAAA,EAAgC;AAC9BC,MAAAA,QAAQ,GAAG,SAAA,QAAA,CAAA,GAAA,EAAG;AAAA,eAAI,IAAA,GAAA,CAAJ,GAAI,CAAJ;AAAdA,OAAAA;AADF,KAAA,MAEO;AACL,UAAI;AAEF,YAAMC,OAAO,GAAIC,OAAO,CAAPA,KAAO,CAAPA,CAAjB,GAAA;;AACAF,QAAAA,QAAQ,GAAG,SAAA,QAAA,CAAA,GAAA,EAAG;AAAA,iBAAI,IAAA,OAAA,CAAJ,GAAI,CAAJ;AAAdA,SAAAA;AAHF,OAAA,CAIE,OAAA,KAAA,EAAc;AACdG,QAAAA,OAAO,CAAPA,GAAAA,CAAAA,KAAAA;AACA,cAAM,IAAA,KAAA,CAAN,mCAAM,CAAN;AACD;AACF;;AAED,QAAMC,UAAU,GAAGJ,QAAQ,CAA3B,IAA2B,CAA3B;AACA,QAAMK,UAAU,GAAGL,QAAQ,CAA3B,IAA2B,CAA3B;AAEA,QAAMM,KAAK,GACTjB,QAAQ,CAACe,UAAU,CAAVA,IAAAA,IAAD,GAAA,EAARf,EAAQ,CAARA,GAAAA,CAAAA,KAA6Ce,UAAU,CAAVA,QAAAA,KAAAA,QAAAA,GAAAA,GAAAA,GAD/C,EACEf,CADF;AAEA,QAAMkB,KAAK,GACTlB,QAAQ,CAACgB,UAAU,CAAVA,IAAAA,IAAD,GAAA,EAARhB,EAAQ,CAARA,GAAAA,CAAAA,KAA6CgB,UAAU,CAAVA,QAAAA,KAAAA,QAAAA,GAAAA,GAAAA,GAD/C,EACEhB,CADF;AAGA,QAAMmB,KAAK,GAAG;AACZC,MAAAA,MAAM,EAAEL,UAAU,CAAVA,QAAAA,KAAwBC,UAAU,CAD9B,QAAA;AAEZK,MAAAA,QAAQ,EAAEN,UAAU,CAAVA,QAAAA,KAAwBC,UAAU,CAFhC,QAAA;AAGZM,MAAAA,IAAI,EAAEL,KAAK,KAHC,KAAA;AAIZM,MAAAA,QAAQ,EACN,CAACd,IAAI,CAAJA,QAAAA,CAAAA,SAAAA,KAA4BA,IAAI,CAAJA,QAAAA,CAA7B,UAA6BA,CAA7B,MACCC,IAAI,CAAJA,QAAAA,CAAAA,SAAAA,KAA4BA,IAAI,CAAJA,QAAAA,CAD7B,UAC6BA,CAD7B;AALU,KAAd;AASA,WAAOS,KAAK,CAALA,MAAAA,IAAgBA,KAAK,CAArBA,QAAAA,IAAkCA,KAAK,CAAvCA,IAAAA,IAAgDA,KAAK,CAA5D,QAAA;AAnCF,GAAA,CAoCE,OAAA,KAAA,EAAc;AACdL,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,KAAAA;AACAA,IAAAA,OAAO,CAAPA,GAAAA,CAAAA,wCAAAA;AAEA,WAAA,KAAA;AACD;AACF;;SAaeU,c,GAAAA;AACd,MAAI,OAAA,IAAA,KAAJ,WAAA,EAAiC;AAC/B,WAAA,IAAA;AACD;;AACD,MAAI,OAAA,MAAA,KAAJ,WAAA,EAAmC;AACjC,WAAA,MAAA;AACD;;AAKD,MAAI,OAAA,MAAA,KAAJ,WAAA,EAAmC;AACjC,WAAA,MAAA;AACD;;AACD,QAAM,IAAA,KAAA,CAAN,mGAAM,CAAN;AAGD;;AAED,SAAA,uBAAA,CAAA,WAAA,EAAA,OAAA,EAAA,SAAA,EAAA;AAKE,MAAA,SAAA,EAAe;AACb,WAAA,aAAA,SAAA,GAAA,cAAA,GAAA,OAAA,GAAA,iCAAA,GAAA,WAAA,GAAA,sDAAA;AADF,GAAA,MAEO;AACL,WAAA,MAAA,OAAA,GAAA,2BAAA,GAAA,WAAA,GAAA,sDAAA;AACD;AACF;;SA4BeC,e,CACdC,I,EAAAA,K,EAAAA;gCAC+E,E,GAAA,K;MAA7EC,kBAAAA,GAAAA,IAAAA,CAAAA,kB;MAAoBC,SAAAA,GAAAA,IAAAA,CAAAA,S;MAAWC,iBAAAA,GAAAA,IAAAA,CAAAA,iB;;AAEjC,MAAIC,WAAW,GAAf,SAAA;;AACA,MAAI;AACFA,IAAAA,WAAW,GAAGN,cAAdM,EAAAA;;AACA,QAAA,WAAA,EAAiB;AACf,UAAMC,GAAG,GAAGD,WAAW,CAAvB,IAAuB,CAAvB;;AACA,UAAA,GAAA,EAAS;AACP,eAAA,GAAA;AACD;AACF;AAPH,GAAA,CAQE,OAAA,KAAA,EAAc;AACdE,IAAAA,MAAM,CAANA,KAAAA,CAAAA,2BAAAA,IAAAA,GAAAA,uBAAAA,GAAAA,WAAAA,GAAAA,KAAAA,GAAAA,KAAAA;AACD;;AACD,MAAA,kBAAA,EAAwB;AACtB,QAAMC,MAAM,GAAGC,uBAAuB,CAAA,WAAA,EAAcR,IAAI,CAAlB,QAAcA,EAAd,EAAtC,SAAsC,CAAtC;AACAM,IAAAA,MAAM,CAANA,KAAAA,CAAAA,MAAAA;AACA,UAAM,IAAA,KAAA,CAAN,MAAM,CAAN;AACD;;AACD,MAAA,iBAAA,EAAuB;AACrB,WAAA,EAAA;AACD;;AACD,SAAA,SAAA;AACD;;SAUeG,gB,CACdC,K,EAAAA,M,EAAAA;kCAC+E,E,GAAA,M;MAA7ET,kBAAAA,GAAAA,KAAAA,CAAAA,kB;MAAoBC,SAAAA,GAAAA,KAAAA,CAAAA,S;MAAWC,iBAAAA,GAAAA,KAAAA,CAAAA,iB;;AAEjC,MAAA,WAAA;;AACA,MAAI;AACFC,IAAAA,WAAW,GAAGN,cAAdM,EAAAA;AADF,GAAA,CAEE,OAAA,KAAA,EAAc;AACdE,IAAAA,MAAM,CAANA,KAAAA,CAAAA,iCAAAA,KAAAA;;AACA,QAAA,kBAAA,EAAwB;AACtB,UAAMC,MAAM,GAAGC,uBAAuB,CAAA,WAAA,EAAcE,KAAK,CAALA,CAAK,CAALA,CAAd,QAAcA,EAAd,EAAtC,SAAsC,CAAtC;AACAJ,MAAAA,MAAM,CAANA,KAAAA,CAAAA,MAAAA;AACA,YAAA,MAAA;AAHF,KAAA,MAIO,IAAA,iBAAA,EAAuB;AAC5BF,MAAAA,WAAW,GAAXA,EAAAA;AACD;AACF;;AAED,MAAMO,MAAM,GAAZ,EAAA;;AACA,OAAK,IAAIC,CAAC,GAAV,CAAA,EAAgBA,CAAC,GAAGF,KAAK,CAAzB,MAAA,EAAkCE,CAAlC,EAAA,EAAuC;AACrC,QAAMZ,IAAI,GAAGU,KAAK,CAAlB,CAAkB,CAAlB;;AACA,QAAI;AACF,UAAA,WAAA,EAAiB;AACf,YAAML,GAAG,GAAGD,WAAW,CAAvB,IAAuB,CAAvB;;AACA,YAAA,GAAA,EAAS;AACPO,UAAAA,MAAM,CAANA,IAAM,CAANA,GAAAA,GAAAA;AADF,SAAA,MAEO,IAAA,kBAAA,EAAwB;AAC7B,cAAMJ,OAAM,GAAGC,uBAAuB,CAAA,WAAA,EAAcR,IAAI,CAAlB,QAAcA,EAAd,EAAtC,SAAsC,CAAtC;;AACAM,UAAAA,MAAM,CAANA,KAAAA,CAAAA,OAAAA;AACA,gBAAM,IAAA,KAAA,CAAN,OAAM,CAAN;AAHK,SAAA,MAIA,IAAA,iBAAA,EAAuB;AAC5BK,UAAAA,MAAM,CAANA,IAAM,CAANA,GAAAA,EAAAA;AACD;AACF;AAZH,KAAA,CAaE,OAAA,KAAA,EAAc;AACd,UAAA,kBAAA,EAAwB;AACtB,YAAMJ,QAAM,GAAGC,uBAAuB,CAAA,WAAA,EAAcR,IAAI,CAAlB,QAAcA,EAAd,EAAtC,SAAsC,CAAtC;;AACAM,QAAAA,MAAM,CAANA,KAAAA,CAAAA,QAAAA;AACA,cAAM,IAAA,KAAA,CAAN,QAAM,CAAN;AACD;AACF;AACF;;AACD,SAAA,MAAA;AACD","sourcesContent":["import { Logger } from './logger';\n\n/**\n *  @ignore\n */\nexport const BLOCKSTACK_HANDLER = 'blockstack';\n\n/**\n * Time\n * @private\n * @ignore\n */\nexport function nextYear() {\n  return new Date(new Date().setFullYear(new Date().getFullYear() + 1));\n}\n\n/**\n * Time\n * @private\n * @ignore\n */\nexport function nextMonth() {\n  return new Date(new Date().setMonth(new Date().getMonth() + 1));\n}\n\n/**\n * Time\n * @private\n * @ignore\n */\nexport function nextHour() {\n  return new Date(new Date().setHours(new Date().getHours() + 1));\n}\n\n/**\n * Converts megabytes to bytes. Returns 0 if the input is not a finite number.\n * @ignore\n */\nexport function megabytesToBytes(megabytes: number): number {\n  if (!Number.isFinite(megabytes)) {\n    return 0;\n  }\n  return Math.floor(megabytes * 1024 * 1024);\n}\n\n/**\n * Calculate the AES-CBC ciphertext output byte length a given input length.\n * AES has a fixed block size of 16-bytes regardless key size.\n * @ignore\n */\nexport function getAesCbcOutputLength(inputByteLength: number) {\n  // AES-CBC block mode rounds up to the next block size.\n  const cipherTextLength = (Math.floor(inputByteLength / 16) + 1) * 16;\n  return cipherTextLength;\n}\n\n/**\n * Calculate the base64 encoded string length for a given input length.\n * This is equivalent to the byte length when the string is ASCII or UTF8-8\n * encoded.\n * @param number\n */\nexport function getBase64OutputLength(inputByteLength: number) {\n  const encodedLength = Math.ceil(inputByteLength / 3) * 4;\n  return encodedLength;\n}\n\n/**\n * Query Strings\n * @private\n * @ignore\n */\n\nexport function updateQueryStringParameter(uri: string, key: string, value: string) {\n  const re = new RegExp(`([?&])${key}=.*?(&|$)`, 'i');\n  const separator = uri.indexOf('?') !== -1 ? '&' : '?';\n  if (uri.match(re)) {\n    return uri.replace(re, `$1${key}=${value}$2`);\n  } else {\n    return `${uri}${separator}${key}=${value}`;\n  }\n}\n\n/**\n * Versioning\n * @param {string} v1 - the left half of the version inequality\n * @param {string} v2 - right half of the version inequality\n * @returns {bool} iff v1 >= v2\n * @private\n * @ignore\n */\n\nexport function isLaterVersion(v1: string, v2: string) {\n  if (v1 === undefined || v1 === '') {\n    v1 = '0.0.0';\n  }\n\n  if (v2 === undefined || v1 === '') {\n    v2 = '0.0.0';\n  }\n\n  const v1tuple = v1.split('.').map(x => parseInt(x, 10));\n  const v2tuple = v2.split('.').map(x => parseInt(x, 10));\n\n  for (let index = 0; index < v2.length; index++) {\n    if (index >= v1.length) {\n      v2tuple.push(0);\n    }\n    if (v1tuple[index] < v2tuple[index]) {\n      return false;\n    }\n  }\n  return true;\n}\n\n/**\n * UUIDs\n * @private\n * @ignore\n */\nexport function makeUUID4() {\n  let d = new Date().getTime();\n  if (typeof performance !== 'undefined' && typeof performance.now === 'function') {\n    d += performance.now(); // use high-precision timer if available\n  }\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (d + Math.random() * 16) % 16 | 0;\n    d = Math.floor(d / 16);\n    return (c === 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n}\n\n/**\n * Checks if both urls pass the same origin check & are absolute\n * @param  {[type]}  uri1 first uri to check\n * @param  {[type]}  uri2 second uri to check\n * @return {Boolean} true if they pass the same origin check\n * @private\n * @ignore\n */\nexport function isSameOriginAbsoluteUrl(uri1: string, uri2: string) {\n  try {\n    // The globally scoped WHATWG `URL` class is available in modern browsers and\n    // NodeJS v10 or higher. In older NodeJS versions it must be required from the\n    // `url` module.\n    let parseUrl: (url: string) => URL;\n    if (typeof URL !== 'undefined') {\n      parseUrl = url => new URL(url);\n    } else {\n      try {\n        // eslint-disable-next-line import/no-nodejs-modules, global-require\n        const nodeUrl = (require('url') as typeof import('url')).URL;\n        parseUrl = url => new nodeUrl(url);\n      } catch (error) {\n        console.log(error);\n        throw new Error('Global URL class is not available');\n      }\n    }\n\n    const parsedUri1 = parseUrl(uri1);\n    const parsedUri2 = parseUrl(uri2);\n\n    const port1 =\n      parseInt(parsedUri1.port || '0', 10) | 0 || (parsedUri1.protocol === 'https:' ? 443 : 80);\n    const port2 =\n      parseInt(parsedUri2.port || '0', 10) | 0 || (parsedUri2.protocol === 'https:' ? 443 : 80);\n\n    const match = {\n      scheme: parsedUri1.protocol === parsedUri2.protocol,\n      hostname: parsedUri1.hostname === parsedUri2.hostname,\n      port: port1 === port2,\n      absolute:\n        (uri1.includes('http://') || uri1.includes('https://')) &&\n        (uri2.includes('http://') || uri2.includes('https://')),\n    };\n\n    return match.scheme && match.hostname && match.port && match.absolute;\n  } catch (error) {\n    console.log(error);\n    console.log('Parsing error in same URL origin check');\n    // Parse error\n    return false;\n  }\n}\n\n/**\n * Returns the global scope `Window`, `WorkerGlobalScope`, or `NodeJS.Global` if available in the\n * currently executing environment.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WorkerGlobalScope/self\n * @see https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope\n *\n * This could be switched to `globalThis` once it is standardized and widely available.\n * @see https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/globalThis\n * @ignore\n */\nexport function getGlobalScope(): Window {\n  if (typeof self !== 'undefined') {\n    return self;\n  }\n  if (typeof window !== 'undefined') {\n    return window;\n  }\n  // This function is meant to be called when accessing APIs that are typically only available in\n  // web-browser/DOM environments, but we also want to support situations where running in Node.js\n  // environment, and a polyfill was added to the Node.js `global` object scope without adding the\n  // `window` global object as well.\n  if (typeof global !== 'undefined') {\n    return (global as unknown) as Window;\n  }\n  throw new Error(\n    'Unexpected runtime environment - no supported global scope (`window`, `self`, `global`) available'\n  );\n}\n\nfunction getAPIUsageErrorMessage(\n  scopeObject: unknown,\n  apiName: string,\n  usageDesc?: string\n): string {\n  if (usageDesc) {\n    return `Use of '${usageDesc}' requires \\`${apiName}\\` which is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n  } else {\n    return `\\`${apiName}\\` is unavailable on the '${scopeObject}' object within the currently executing environment.`;\n  }\n}\n\ninterface GetGlobalObjectOptions {\n  /**\n   * Throw an error if the object is not found.\n   * @default false\n   */\n  throwIfUnavailable?: boolean;\n  /**\n   * Additional information to include in an error if thrown.\n   */\n  usageDesc?: string;\n  /**\n   * If the object is not found, return an new empty object instead of undefined.\n   * Requires [[throwIfUnavailable]] to be falsey.\n   * @default false\n   */\n  returnEmptyObject?: boolean;\n}\n\n/**\n * Returns an object from the global scope (`Window` or `WorkerGlobalScope`) if it\n * is available within the currently executing environment.\n * When executing within the Node.js runtime these APIs are unavailable and will be\n * `undefined` unless the API is provided via polyfill.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n * @ignore\n */\nexport function getGlobalObject<K extends Extract<keyof Window, string>>(\n  name: K,\n  { throwIfUnavailable, usageDesc, returnEmptyObject }: GetGlobalObjectOptions = {}\n): Window[K] | undefined {\n  let globalScope: Window | undefined = undefined;\n  try {\n    globalScope = getGlobalScope();\n    if (globalScope) {\n      const obj = globalScope[name];\n      if (obj) {\n        return obj;\n      }\n    }\n  } catch (error) {\n    Logger.error(`Error getting object '${name}' from global scope '${globalScope}': ${error}`);\n  }\n  if (throwIfUnavailable) {\n    const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n    Logger.error(errMsg);\n    throw new Error(errMsg);\n  }\n  if (returnEmptyObject) {\n    return {} as any;\n  }\n  return undefined;\n}\n\n/**\n * Returns a specified subset of objects from the global scope (`Window` or `WorkerGlobalScope`)\n * if they are available within the currently executing environment.\n * When executing within the Node.js runtime these APIs are unavailable will be `undefined`\n * unless the API is provided via polyfill.\n * @see https://developer.mozilla.org/en-US/docs/Web/API/Window/self\n * @ignore\n */\nexport function getGlobalObjects<K extends Extract<keyof Window, string>>(\n  names: K[],\n  { throwIfUnavailable, usageDesc, returnEmptyObject }: GetGlobalObjectOptions = {}\n): Pick<Window, K> {\n  let globalScope: Window | undefined;\n  try {\n    globalScope = getGlobalScope();\n  } catch (error) {\n    Logger.error(`Error getting global scope: ${error}`);\n    if (throwIfUnavailable) {\n      const errMsg = getAPIUsageErrorMessage(globalScope, names[0].toString(), usageDesc);\n      Logger.error(errMsg);\n      throw errMsg;\n    } else if (returnEmptyObject) {\n      globalScope = {} as any;\n    }\n  }\n\n  const result: Pick<Window, K> = {} as any;\n  for (let i = 0; i < names.length; i++) {\n    const name = names[i];\n    try {\n      if (globalScope) {\n        const obj = globalScope[name];\n        if (obj) {\n          result[name] = obj;\n        } else if (throwIfUnavailable) {\n          const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n          Logger.error(errMsg);\n          throw new Error(errMsg);\n        } else if (returnEmptyObject) {\n          result[name] = {} as any;\n        }\n      }\n    } catch (error) {\n      if (throwIfUnavailable) {\n        const errMsg = getAPIUsageErrorMessage(globalScope, name.toString(), usageDesc);\n        Logger.error(errMsg);\n        throw new Error(errMsg);\n      }\n    }\n  }\n  return result;\n}\n"]},"metadata":{},"sourceType":"module"}