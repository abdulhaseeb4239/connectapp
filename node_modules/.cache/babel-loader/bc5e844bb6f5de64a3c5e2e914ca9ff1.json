{"ast":null,"code":"import { intToBigInt } from '@stacks/common';\nimport { ClarityType } from '../clarityValue';\nconst MAX_U128 = BigInt(2) ** BigInt(128) - BigInt(1);\nconst MIN_U128 = BigInt(0);\nconst MAX_I128 = BigInt(2) ** BigInt(127) - BigInt(1);\nconst MIN_I128 = BigInt(-2) ** BigInt(127);\n\nconst intCV = value => {\n  const bigInt = intToBigInt(value, true);\n\n  if (bigInt > MAX_I128) {\n    throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128.toString()}`);\n  } else if (bigInt < MIN_I128) {\n    throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128.toString()}`);\n  }\n\n  return {\n    type: ClarityType.Int,\n    value: bigInt\n  };\n};\n\nconst uintCV = value => {\n  const bigInt = intToBigInt(value, false);\n\n  if (bigInt < MIN_U128) {\n    throw new RangeError('Cannot construct unsigned clarity integer from negative value');\n  } else if (bigInt > MAX_U128) {\n    throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128.toString()}`);\n  }\n\n  return {\n    type: ClarityType.UInt,\n    value: bigInt\n  };\n};\n\nexport { intCV, uintCV };","map":{"version":3,"sources":["../../../../src/clarity/types/intCV.ts"],"names":[],"mappings":"AAAA,SAAsB,WAAtB,QAAyC,gBAAzC;AACA,SAAS,WAAT,QAA4B,iBAA5B;AAEA,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAD,CAAN,IAAa,MAAM,CAAC,GAAD,CAAnB,GAA2B,MAAM,CAAC,CAAD,CAAlD;AACA,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAD,CAAvB;AACA,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAD,CAAN,IAAa,MAAM,CAAC,GAAD,CAAnB,GAA2B,MAAM,CAAC,CAAD,CAAlD;AACA,MAAM,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAF,CAAN,IAAc,MAAM,CAAC,GAAD,CAArC;;AAOA,MAAM,KAAK,GAAI,KAAD,IAA8B;AAC1C,QAAM,MAAM,GAAG,WAAW,CAAC,KAAD,EAAQ,IAAR,CAA1B;;AACA,MAAI,MAAM,GAAG,QAAb,EAAuB;AACrB,UAAM,IAAI,UAAJ,CACJ,4DAA4D,QAAQ,CAAC,QAAT,EAAmB,EAD3E,CAAN;AAGD,GAJD,MAIO,IAAI,MAAM,GAAG,QAAb,EAAuB;AAC5B,UAAM,IAAI,UAAJ,CACJ,yDAAyD,QAAQ,CAAC,QAAT,EAAmB,EADxE,CAAN;AAGD;;AACD,SAAO;AAAE,IAAA,IAAI,EAAE,WAAW,CAAC,GAApB;AAAyB,IAAA,KAAK,EAAE;AAAhC,GAAP;AACD,CAZD;;AAmBA,MAAM,MAAM,GAAI,KAAD,IAA+B;AAC5C,QAAM,MAAM,GAAG,WAAW,CAAC,KAAD,EAAQ,KAAR,CAA1B;;AACA,MAAI,MAAM,GAAG,QAAb,EAAuB;AACrB,UAAM,IAAI,UAAJ,CAAe,+DAAf,CAAN;AACD,GAFD,MAEO,IAAI,MAAM,GAAG,QAAb,EAAuB;AAC5B,UAAM,IAAI,UAAJ,CACJ,0DAA0D,QAAQ,CAAC,QAAT,EAAmB,EADzE,CAAN;AAGD;;AACD,SAAO;AAAE,IAAA,IAAI,EAAE,WAAW,CAAC,IAApB;AAA0B,IAAA,KAAK,EAAE;AAAjC,GAAP;AACD,CAVD;;AAYA,SAAwB,KAAxB,EAA+B,MAA/B","sourceRoot":"","sourcesContent":["import { intToBigInt } from '@stacks/common';\nimport { ClarityType } from '../clarityValue';\nconst MAX_U128 = BigInt(2) ** BigInt(128) - BigInt(1);\nconst MIN_U128 = BigInt(0);\nconst MAX_I128 = BigInt(2) ** BigInt(127) - BigInt(1);\nconst MIN_I128 = BigInt(-2) ** BigInt(127);\nconst intCV = (value) => {\n    const bigInt = intToBigInt(value, true);\n    if (bigInt > MAX_I128) {\n        throw new RangeError(`Cannot construct clarity integer from value greater than ${MAX_I128.toString()}`);\n    }\n    else if (bigInt < MIN_I128) {\n        throw new RangeError(`Cannot construct clarity integer form value less than ${MIN_I128.toString()}`);\n    }\n    return { type: ClarityType.Int, value: bigInt };\n};\nconst uintCV = (value) => {\n    const bigInt = intToBigInt(value, false);\n    if (bigInt < MIN_U128) {\n        throw new RangeError('Cannot construct unsigned clarity integer from negative value');\n    }\n    else if (bigInt > MAX_U128) {\n        throw new RangeError(`Cannot construct unsigned clarity integer greater than ${MAX_U128.toString()}`);\n    }\n    return { type: ClarityType.UInt, value: bigInt };\n};\nexport { intCV, uintCV };\n//# sourceMappingURL=intCV.js.map"]},"metadata":{},"sourceType":"module"}