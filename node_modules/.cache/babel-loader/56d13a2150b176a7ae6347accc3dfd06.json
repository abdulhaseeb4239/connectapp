{"ast":null,"code":"import { TransactionVersion, ChainID, fetchPrivate } from '@stacks/common';\nexport const HIRO_MAINNET_DEFAULT = 'https://stacks-node-api.mainnet.stacks.co';\nexport const HIRO_REGTEST_DEFAULT = 'https://stacks-node-api.regtest.stacks.co';\nexport const HIRO_TESTNET_DEFAULT = 'https://stacks-node-api.testnet.stacks.co';\nexport const HIRO_MOCKNET_DEFAULT = 'http://localhost:3999';\nexport class StacksMainnet {\n  constructor(networkUrl = {\n    url: HIRO_MAINNET_DEFAULT\n  }) {\n    this.version = TransactionVersion.Mainnet;\n    this.chainId = ChainID.Mainnet;\n    this.bnsLookupUrl = 'https://stacks-node-api.mainnet.stacks.co';\n    this.broadcastEndpoint = '/v2/transactions';\n    this.transferFeeEstimateEndpoint = '/v2/fees/transfer';\n    this.accountEndpoint = '/v2/accounts';\n    this.contractAbiEndpoint = '/v2/contracts/interface';\n    this.readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';\n\n    this.isMainnet = () => this.version === TransactionVersion.Mainnet;\n\n    this.getBroadcastApiUrl = () => `${this.coreApiUrl}${this.broadcastEndpoint}`;\n\n    this.getTransferFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transferFeeEstimateEndpoint}`;\n\n    this.getAccountApiUrl = address => `${this.coreApiUrl}${this.accountEndpoint}/${address}?proof=0`;\n\n    this.getAbiApiUrl = (address, contract) => `${this.coreApiUrl}${this.contractAbiEndpoint}/${address}/${contract}`;\n\n    this.getReadOnlyFunctionCallApiUrl = (contractAddress, contractName, functionName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}/${contractAddress}/${contractName}/${encodeURIComponent(functionName)}`;\n\n    this.getInfoUrl = () => `${this.coreApiUrl}/v2/info`;\n\n    this.getBlockTimeInfoUrl = () => `${this.coreApiUrl}/extended/v1/info/network_block_times`;\n\n    this.getPoxInfoUrl = () => `${this.coreApiUrl}/v2/pox`;\n\n    this.getRewardsUrl = (address, options) => {\n      let url = `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}`;\n\n      if (options) {\n        url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n      }\n\n      return url;\n    };\n\n    this.getRewardsTotalUrl = address => `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}/total`;\n\n    this.getRewardHoldersUrl = (address, options) => {\n      let url = `${this.coreApiUrl}/extended/v1/burnchain/reward_slot_holders/${address}`;\n\n      if (options) {\n        url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n      }\n\n      return url;\n    };\n\n    this.getStackerInfoUrl = (contractAddress, contractName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}\n    ${contractAddress}/${contractName}/get-stacker-info`;\n\n    this._coreApiUrl = networkUrl.url;\n  }\n\n  get coreApiUrl() {\n    return this._coreApiUrl;\n  }\n\n  set coreApiUrl(_url) {\n    throw new Error('Cannot modify property `coreApiUrl` after object initialization');\n  }\n\n  getNameInfo(fullyQualifiedName) {\n    const nameLookupURL = `${this.bnsLookupUrl}/v1/names/${fullyQualifiedName}`;\n    return fetchPrivate(nameLookupURL).then(resp => {\n      if (resp.status === 404) {\n        throw new Error('Name not found');\n      } else if (resp.status !== 200) {\n        throw new Error(`Bad response status: ${resp.status}`);\n      } else {\n        return resp.json();\n      }\n    }).then(nameInfo => {\n      if (nameInfo.address) {\n        return Object.assign({}, nameInfo, {\n          address: nameInfo.address\n        });\n      } else {\n        return nameInfo;\n      }\n    });\n  }\n\n}\nexport class StacksTestnet extends StacksMainnet {\n  constructor(networkUrl = {\n    url: HIRO_TESTNET_DEFAULT\n  }) {\n    super(networkUrl);\n    this.version = TransactionVersion.Testnet;\n    this.chainId = ChainID.Testnet;\n  }\n\n}\nexport class StacksMocknet extends StacksMainnet {\n  constructor(networkUrl = {\n    url: HIRO_MOCKNET_DEFAULT\n  }) {\n    super(networkUrl);\n    this.version = TransactionVersion.Testnet;\n    this.chainId = ChainID.Testnet;\n  }\n\n}\nexport class StacksRegtest extends StacksMainnet {\n  constructor(networkUrl = {\n    url: HIRO_REGTEST_DEFAULT\n  }) {\n    super(networkUrl);\n    this.version = TransactionVersion.Testnet;\n    this.chainId = ChainID.Testnet;\n  }\n\n}","map":{"version":3,"sources":["../../src/index.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { TransactionVersion, ChainID, fetchPrivate } from '@stacks/common';\nexport const HIRO_MAINNET_DEFAULT = 'https://stacks-node-api.mainnet.stacks.co';\nexport const HIRO_REGTEST_DEFAULT = 'https://stacks-node-api.regtest.stacks.co';\nexport const HIRO_TESTNET_DEFAULT = 'https://stacks-node-api.testnet.stacks.co';\nexport const HIRO_MOCKNET_DEFAULT = 'http://localhost:3999';\nexport class StacksMainnet {\n    constructor(networkUrl = { url: HIRO_MAINNET_DEFAULT }) {\n        this.version = TransactionVersion.Mainnet;\n        this.chainId = ChainID.Mainnet;\n        this.bnsLookupUrl = 'https://stacks-node-api.mainnet.stacks.co';\n        this.broadcastEndpoint = '/v2/transactions';\n        this.transferFeeEstimateEndpoint = '/v2/fees/transfer';\n        this.accountEndpoint = '/v2/accounts';\n        this.contractAbiEndpoint = '/v2/contracts/interface';\n        this.readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';\n        this.isMainnet = () => this.version === TransactionVersion.Mainnet;\n        this.getBroadcastApiUrl = () => `${this.coreApiUrl}${this.broadcastEndpoint}`;\n        this.getTransferFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transferFeeEstimateEndpoint}`;\n        this.getAccountApiUrl = (address) => `${this.coreApiUrl}${this.accountEndpoint}/${address}?proof=0`;\n        this.getAbiApiUrl = (address, contract) => `${this.coreApiUrl}${this.contractAbiEndpoint}/${address}/${contract}`;\n        this.getReadOnlyFunctionCallApiUrl = (contractAddress, contractName, functionName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}/${contractAddress}/${contractName}/${encodeURIComponent(functionName)}`;\n        this.getInfoUrl = () => `${this.coreApiUrl}/v2/info`;\n        this.getBlockTimeInfoUrl = () => `${this.coreApiUrl}/extended/v1/info/network_block_times`;\n        this.getPoxInfoUrl = () => `${this.coreApiUrl}/v2/pox`;\n        this.getRewardsUrl = (address, options) => {\n            let url = `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}`;\n            if (options) {\n                url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n            }\n            return url;\n        };\n        this.getRewardsTotalUrl = (address) => `${this.coreApiUrl}/extended/v1/burnchain/rewards/${address}/total`;\n        this.getRewardHoldersUrl = (address, options) => {\n            let url = `${this.coreApiUrl}/extended/v1/burnchain/reward_slot_holders/${address}`;\n            if (options) {\n                url = `${url}?limit=${options.limit}&offset=${options.offset}`;\n            }\n            return url;\n        };\n        this.getStackerInfoUrl = (contractAddress, contractName) => `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}\n    ${contractAddress}/${contractName}/get-stacker-info`;\n        this._coreApiUrl = networkUrl.url;\n    }\n    get coreApiUrl() {\n        return this._coreApiUrl;\n    }\n    set coreApiUrl(_url) {\n        throw new Error('Cannot modify property `coreApiUrl` after object initialization');\n    }\n    getNameInfo(fullyQualifiedName) {\n        const nameLookupURL = `${this.bnsLookupUrl}/v1/names/${fullyQualifiedName}`;\n        return fetchPrivate(nameLookupURL)\n            .then(resp => {\n            if (resp.status === 404) {\n                throw new Error('Name not found');\n            }\n            else if (resp.status !== 200) {\n                throw new Error(`Bad response status: ${resp.status}`);\n            }\n            else {\n                return resp.json();\n            }\n        })\n            .then(nameInfo => {\n            if (nameInfo.address) {\n                return Object.assign({}, nameInfo, { address: nameInfo.address });\n            }\n            else {\n                return nameInfo;\n            }\n        });\n    }\n}\nexport class StacksTestnet extends StacksMainnet {\n    constructor(networkUrl = { url: HIRO_TESTNET_DEFAULT }) {\n        super(networkUrl);\n        this.version = TransactionVersion.Testnet;\n        this.chainId = ChainID.Testnet;\n    }\n}\nexport class StacksMocknet extends StacksMainnet {\n    constructor(networkUrl = { url: HIRO_MOCKNET_DEFAULT }) {\n        super(networkUrl);\n        this.version = TransactionVersion.Testnet;\n        this.chainId = ChainID.Testnet;\n    }\n}\nexport class StacksRegtest extends StacksMainnet {\n    constructor(networkUrl = { url: HIRO_REGTEST_DEFAULT }) {\n        super(networkUrl);\n        this.version = TransactionVersion.Testnet;\n        this.chainId = ChainID.Testnet;\n    }\n}\n//# sourceMappingURL=index.js.map"]},"metadata":{},"sourceType":"module"}