{"ast":null,"code":"import { InvalidStateError } from '@stacks/common';\nconst SESSION_VERSION = '1.0.0';\nexport class SessionData {\n  constructor(options) {\n    this.version = SESSION_VERSION;\n    this.userData = options.userData;\n    this.transitKey = options.transitKey;\n    this.etags = options.etags ? options.etags : {};\n  }\n\n  static fromJSON(json) {\n    if (json.version !== SESSION_VERSION) {\n      throw new InvalidStateError(`JSON data version ${json.version} not supported by SessionData`);\n    }\n\n    const options = {\n      coreNode: json.coreNode,\n      userData: json.userData,\n      transitKey: json.transitKey,\n      etags: json.etags\n    };\n    return new SessionData(options);\n  }\n\n  toString() {\n    return JSON.stringify(this);\n  }\n\n}","map":{"version":3,"sources":["../../src/sessionData.ts"],"names":[],"mappings":"AAAA,SAAS,iBAAT,QAAkC,gBAAlC;AAGA,MAAM,eAAe,GAAG,OAAxB;AAkBA,OAAM,MAAO,WAAP,CAAkB;AAWtB,EAAA,WAAA,CAAY,OAAZ,EAAmC;AACjC,SAAK,OAAL,GAAe,eAAf;AACA,SAAK,QAAL,GAAgB,OAAO,CAAC,QAAxB;AACA,SAAK,UAAL,GAAkB,OAAO,CAAC,UAA1B;AACA,SAAK,KAAL,GAAa,OAAO,CAAC,KAAR,GAAgB,OAAO,CAAC,KAAxB,GAAgC,EAA7C;AACD;;AAUc,SAAR,QAAQ,CAAC,IAAD,EAAU;AACvB,QAAI,IAAI,CAAC,OAAL,KAAiB,eAArB,EAAsC;AACpC,YAAM,IAAI,iBAAJ,CAAsB,qBAAqB,IAAI,CAAC,OAAO,+BAAvD,CAAN;AACD;;AACD,UAAM,OAAO,GAAmB;AAC9B,MAAA,QAAQ,EAAE,IAAI,CAAC,QADe;AAE9B,MAAA,QAAQ,EAAE,IAAI,CAAC,QAFe;AAG9B,MAAA,UAAU,EAAE,IAAI,CAAC,UAHa;AAI9B,MAAA,KAAK,EAAE,IAAI,CAAC;AAJkB,KAAhC;AAMA,WAAO,IAAI,WAAJ,CAAgB,OAAhB,CAAP;AACD;;AAED,EAAA,QAAQ,GAAA;AACN,WAAO,IAAI,CAAC,SAAL,CAAe,IAAf,CAAP;AACD;;AAzCqB","sourceRoot":"","sourcesContent":["import { InvalidStateError } from '@stacks/common';\nconst SESSION_VERSION = '1.0.0';\nexport class SessionData {\n    constructor(options) {\n        this.version = SESSION_VERSION;\n        this.userData = options.userData;\n        this.transitKey = options.transitKey;\n        this.etags = options.etags ? options.etags : {};\n    }\n    static fromJSON(json) {\n        if (json.version !== SESSION_VERSION) {\n            throw new InvalidStateError(`JSON data version ${json.version} not supported by SessionData`);\n        }\n        const options = {\n            coreNode: json.coreNode,\n            userData: json.userData,\n            transitKey: json.transitKey,\n            etags: json.etags,\n        };\n        return new SessionData(options);\n    }\n    toString() {\n        return JSON.stringify(this);\n    }\n}\n//# sourceMappingURL=sessionData.js.map"]},"metadata":{},"sourceType":"module"}