{"ast":null,"code":"import { inheritsLoose as _inheritsLoose } from './_virtual/_rollupPluginBabelHelpers.js';\nimport { fetchPrivate, TransactionVersion, ChainID } from '@stacks/common';\n\nvar StacksMainnet = /*#__PURE__*/function () {\n  function StacksMainnet() {\n    var _this = this;\n\n    this.version = TransactionVersion.Mainnet;\n    this.chainId = ChainID.Mainnet;\n    this.coreApiUrl = 'https://stacks-node-api.mainnet.stacks.co';\n    this.bnsLookupUrl = 'https://core.blockstack.org';\n    this.broadcastEndpoint = '/v2/transactions';\n    this.transferFeeEstimateEndpoint = '/v2/fees/transfer';\n    this.accountEndpoint = '/v2/accounts';\n    this.contractAbiEndpoint = '/v2/contracts/interface';\n    this.readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';\n\n    this.isMainnet = function () {\n      return _this.version === TransactionVersion.Mainnet;\n    };\n\n    this.getBroadcastApiUrl = function () {\n      return \"\" + _this.coreApiUrl + _this.broadcastEndpoint;\n    };\n\n    this.getTransferFeeEstimateApiUrl = function () {\n      return \"\" + _this.coreApiUrl + _this.transferFeeEstimateEndpoint;\n    };\n\n    this.getAccountApiUrl = function (address) {\n      return \"\" + _this.coreApiUrl + _this.accountEndpoint + \"/\" + address + \"?proof=0\";\n    };\n\n    this.getAbiApiUrl = function (address, contract) {\n      return \"\" + _this.coreApiUrl + _this.contractAbiEndpoint + \"/\" + address + \"/\" + contract;\n    };\n\n    this.getReadOnlyFunctionCallApiUrl = function (contractAddress, contractName, functionName) {\n      return \"\" + _this.coreApiUrl + _this.readOnlyFunctionCallEndpoint + \"/\" + contractAddress + \"/\" + contractName + \"/\" + encodeURIComponent(functionName);\n    };\n\n    this.getInfoUrl = function () {\n      return _this.coreApiUrl + \"/v2/info\";\n    };\n\n    this.getBlockTimeInfoUrl = function () {\n      return _this.coreApiUrl + \"/extended/v1/info/network_block_times\";\n    };\n\n    this.getPoxInfoUrl = function () {\n      return _this.coreApiUrl + \"/v2/pox\";\n    };\n\n    this.getStackerInfoUrl = function (contractAddress, contractName) {\n      return \"\" + _this.coreApiUrl + _this.readOnlyFunctionCallEndpoint + \"\\n    \" + contractAddress + \"/\" + contractName + \"/get-stacker-info\";\n    };\n  }\n\n  var _proto = StacksMainnet.prototype;\n\n  _proto.getNameInfo = function getNameInfo(fullyQualifiedName) {\n    var nameLookupURL = this.bnsLookupUrl + \"/v1/names/\" + fullyQualifiedName;\n    return fetchPrivate(nameLookupURL).then(function (resp) {\n      if (resp.status === 404) {\n        throw new Error('Name not found');\n      } else if (resp.status !== 200) {\n        throw new Error(\"Bad response status: \" + resp.status);\n      } else {\n        return resp.json();\n      }\n    }).then(function (nameInfo) {\n      if (nameInfo.address) {\n        return Object.assign({}, nameInfo, {\n          address: nameInfo.address\n        });\n      } else {\n        return nameInfo;\n      }\n    });\n  };\n\n  return StacksMainnet;\n}();\n\nvar StacksTestnet = /*#__PURE__*/function (_StacksMainnet) {\n  _inheritsLoose(StacksTestnet, _StacksMainnet);\n\n  function StacksTestnet() {\n    var _this2;\n\n    _this2 = _StacksMainnet.apply(this, arguments) || this;\n    _this2.version = TransactionVersion.Testnet;\n    _this2.chainId = ChainID.Testnet;\n    _this2.coreApiUrl = 'https://stacks-node-api.testnet.stacks.co';\n    return _this2;\n  }\n\n  return StacksTestnet;\n}(StacksMainnet);\n\nvar StacksMocknet = /*#__PURE__*/function (_StacksMainnet2) {\n  _inheritsLoose(StacksMocknet, _StacksMainnet2);\n\n  function StacksMocknet() {\n    var _this3;\n\n    _this3 = _StacksMainnet2.apply(this, arguments) || this;\n    _this3.version = TransactionVersion.Testnet;\n    _this3.chainId = ChainID.Testnet;\n    _this3.coreApiUrl = 'http://localhost:3999';\n    return _this3;\n  }\n\n  return StacksMocknet;\n}(StacksMainnet);\n\nexport { StacksMainnet, StacksMocknet, StacksTestnet };","map":{"version":3,"sources":["../src/index.ts"],"names":["StacksMainnet","TransactionVersion","ChainID","encodeURIComponent","getNameInfo","nameLookupURL","resp","nameInfo","address","StacksTestnet","StacksMocknet"],"mappings":"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","sourcesContent":["import { TransactionVersion, ChainID, fetchPrivate } from '@stacks/common';\n\nexport interface StacksNetwork {\n  version: TransactionVersion;\n  chainId: ChainID;\n  coreApiUrl: string;\n  bnsLookupUrl: string;\n  broadcastEndpoint: string;\n  transferFeeEstimateEndpoint: string;\n  accountEndpoint: string;\n  contractAbiEndpoint: string;\n  readOnlyFunctionCallEndpoint: string;\n  isMainnet(): boolean;\n  getBroadcastApiUrl: () => string;\n  getTransferFeeEstimateApiUrl: () => string;\n  getAccountApiUrl: (address: string) => string;\n  getAbiApiUrl: (address: string, contract: string) => string;\n  getReadOnlyFunctionCallApiUrl: (\n    contractAddress: string,\n    contractName: string,\n    functionName: string\n  ) => string;\n  getInfoUrl: () => string;\n  getBlockTimeInfoUrl: () => string;\n  getPoxInfoUrl: () => string;\n  getStackerInfoUrl: (contractAddress: string, contractName: string) => string;\n\n  /**\n   * Get WHOIS-like information for a name, including the address that owns it,\n   * the block at which it expires, and the zone file anchored to it (if available).\n   *\n   * This is intended for use in third-party wallets or in DApps that register names.\n   * @param fullyQualifiedName the name to query.  Can be on-chain of off-chain.\n   * @return a promise that resolves to the WHOIS-like information\n   */\n  getNameInfo: (fullyQualifiedName: string) => any;\n}\n\nexport class StacksMainnet implements StacksNetwork {\n  version = TransactionVersion.Mainnet;\n  chainId = ChainID.Mainnet;\n  coreApiUrl = 'https://stacks-node-api.mainnet.stacks.co';\n  // TODO: change this when mainnet is live. BNS endpoints are not live yet.\n  bnsLookupUrl = 'https://core.blockstack.org';\n  broadcastEndpoint = '/v2/transactions';\n  transferFeeEstimateEndpoint = '/v2/fees/transfer';\n  accountEndpoint = '/v2/accounts';\n  contractAbiEndpoint = '/v2/contracts/interface';\n  readOnlyFunctionCallEndpoint = '/v2/contracts/call-read';\n\n  isMainnet = () => this.version === TransactionVersion.Mainnet;\n  getBroadcastApiUrl = () => `${this.coreApiUrl}${this.broadcastEndpoint}`;\n  getTransferFeeEstimateApiUrl = () => `${this.coreApiUrl}${this.transferFeeEstimateEndpoint}`;\n  getAccountApiUrl = (address: string) =>\n    `${this.coreApiUrl}${this.accountEndpoint}/${address}?proof=0`;\n  getAbiApiUrl = (address: string, contract: string) =>\n    `${this.coreApiUrl}${this.contractAbiEndpoint}/${address}/${contract}`;\n  getReadOnlyFunctionCallApiUrl = (\n    contractAddress: string,\n    contractName: string,\n    functionName: string\n  ) =>\n    `${this.coreApiUrl}${\n      this.readOnlyFunctionCallEndpoint\n    }/${contractAddress}/${contractName}/${encodeURIComponent(functionName)}`;\n  getInfoUrl = () => `${this.coreApiUrl}/v2/info`;\n  getBlockTimeInfoUrl = () => `${this.coreApiUrl}/extended/v1/info/network_block_times`;\n  getPoxInfoUrl = () => `${this.coreApiUrl}/v2/pox`;\n  getStackerInfoUrl = (contractAddress: string, contractName: string) =>\n    `${this.coreApiUrl}${this.readOnlyFunctionCallEndpoint}\n    ${contractAddress}/${contractName}/get-stacker-info`;\n  getNameInfo(fullyQualifiedName: string) {\n    /*\n      TODO: Update to v2 API URL for name lookups\n    */\n    const nameLookupURL = `${this.bnsLookupUrl}/v1/names/${fullyQualifiedName}`;\n    return fetchPrivate(nameLookupURL)\n      .then(resp => {\n        if (resp.status === 404) {\n          throw new Error('Name not found');\n        } else if (resp.status !== 200) {\n          throw new Error(`Bad response status: ${resp.status}`);\n        } else {\n          return resp.json();\n        }\n      })\n      .then(nameInfo => {\n        // the returned address _should_ be in the correct network ---\n        //  blockstackd gets into trouble because it tries to coerce back to mainnet\n        //  and the regtest transaction generation libraries want to use testnet addresses\n        if (nameInfo.address) {\n          return Object.assign({}, nameInfo, { address: nameInfo.address });\n        } else {\n          return nameInfo;\n        }\n      });\n  }\n}\n\nexport class StacksTestnet extends StacksMainnet implements StacksNetwork {\n  version = TransactionVersion.Testnet;\n  chainId = ChainID.Testnet;\n  coreApiUrl = 'https://stacks-node-api.testnet.stacks.co';\n}\n\nexport class StacksMocknet extends StacksMainnet implements StacksNetwork {\n  version = TransactionVersion.Testnet;\n  chainId = ChainID.Testnet;\n  coreApiUrl = 'http://localhost:3999';\n}\n"]},"metadata":{},"sourceType":"module"}