{"ast":null,"code":"import { SessionData } from './sessionData';\nimport { LOCALSTORAGE_SESSION_KEY } from './constants';\nimport { NoSessionDataError } from '@stacks/common';\nexport class SessionDataStore {\n  constructor(sessionOptions) {\n    if (sessionOptions) {\n      const newSessionData = new SessionData(sessionOptions);\n      this.setSessionData(newSessionData);\n    }\n  }\n\n  getSessionData() {\n    throw new Error('Abstract class');\n  }\n\n  setSessionData(_session) {\n    throw new Error('Abstract class');\n  }\n\n  deleteSessionData() {\n    throw new Error('Abstract class');\n  }\n\n}\nexport class InstanceDataStore extends SessionDataStore {\n  constructor(sessionOptions) {\n    super(sessionOptions);\n\n    if (!this.sessionData) {\n      this.setSessionData(new SessionData({}));\n    }\n  }\n\n  getSessionData() {\n    if (!this.sessionData) {\n      throw new NoSessionDataError('No session data was found.');\n    }\n\n    return this.sessionData;\n  }\n\n  setSessionData(session) {\n    this.sessionData = session;\n    return true;\n  }\n\n  deleteSessionData() {\n    this.setSessionData(new SessionData({}));\n    return true;\n  }\n\n}\nexport class LocalStorageStore extends SessionDataStore {\n  constructor(sessionOptions) {\n    super(sessionOptions);\n\n    if (sessionOptions && sessionOptions.storeOptions && sessionOptions.storeOptions.localStorageKey && typeof sessionOptions.storeOptions.localStorageKey === 'string') {\n      this.key = sessionOptions.storeOptions.localStorageKey;\n    } else {\n      this.key = LOCALSTORAGE_SESSION_KEY;\n    }\n\n    const data = localStorage.getItem(this.key);\n\n    if (!data) {\n      const sessionData = new SessionData({});\n      this.setSessionData(sessionData);\n    }\n  }\n\n  getSessionData() {\n    const data = localStorage.getItem(this.key);\n\n    if (!data) {\n      throw new NoSessionDataError('No session data was found in localStorage');\n    }\n\n    const dataJSON = JSON.parse(data);\n    return SessionData.fromJSON(dataJSON);\n  }\n\n  setSessionData(session) {\n    localStorage.setItem(this.key, session.toString());\n    return true;\n  }\n\n  deleteSessionData() {\n    localStorage.removeItem(this.key);\n    this.setSessionData(new SessionData({}));\n    return true;\n  }\n\n}","map":{"version":3,"sources":["../../src/sessionStore.ts"],"names":[],"mappings":"AAAA,SAAS,WAAT,QAA4C,eAA5C;AACA,SAAS,wBAAT,QAAyC,aAAzC;AACA,SAAS,kBAAT,QAAmC,gBAAnC;AAMA,OAAM,MAAO,gBAAP,CAAuB;AAC3B,EAAA,WAAA,CAAY,cAAZ,EAA2C;AACzC,QAAI,cAAJ,EAAoB;AAClB,YAAM,cAAc,GAAG,IAAI,WAAJ,CAAgB,cAAhB,CAAvB;AACA,WAAK,cAAL,CAAoB,cAApB;AACD;AACF;;AAED,EAAA,cAAc,GAAA;AACZ,UAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAGD,EAAA,cAAc,CAAC,QAAD,EAAsB;AAClC,UAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAED,EAAA,iBAAiB,GAAA;AACf,UAAM,IAAI,KAAJ,CAAU,gBAAV,CAAN;AACD;;AAnB0B;AA0B7B,OAAM,MAAO,iBAAP,SAAiC,gBAAjC,CAAiD;AAGrD,EAAA,WAAA,CAAY,cAAZ,EAA2C;AACzC,UAAM,cAAN;;AACA,QAAI,CAAC,KAAK,WAAV,EAAuB;AACrB,WAAK,cAAL,CAAoB,IAAI,WAAJ,CAAgB,EAAhB,CAApB;AACD;AACF;;AAED,EAAA,cAAc,GAAA;AACZ,QAAI,CAAC,KAAK,WAAV,EAAuB;AACrB,YAAM,IAAI,kBAAJ,CAAuB,4BAAvB,CAAN;AACD;;AACD,WAAO,KAAK,WAAZ;AACD;;AAED,EAAA,cAAc,CAAC,OAAD,EAAqB;AACjC,SAAK,WAAL,GAAmB,OAAnB;AACA,WAAO,IAAP;AACD;;AAED,EAAA,iBAAiB,GAAA;AACf,SAAK,cAAL,CAAoB,IAAI,WAAJ,CAAgB,EAAhB,CAApB;AACA,WAAO,IAAP;AACD;;AAzBoD;AAgCvD,OAAM,MAAO,iBAAP,SAAiC,gBAAjC,CAAiD;AAGrD,EAAA,WAAA,CAAY,cAAZ,EAA2C;AACzC,UAAM,cAAN;;AACA,QACE,cAAc,IACd,cAAc,CAAC,YADf,IAEA,cAAc,CAAC,YAAf,CAA4B,eAF5B,IAGA,OAAO,cAAc,CAAC,YAAf,CAA4B,eAAnC,KAAuD,QAJzD,EAKE;AACA,WAAK,GAAL,GAAW,cAAc,CAAC,YAAf,CAA4B,eAAvC;AACD,KAPD,MAOO;AACL,WAAK,GAAL,GAAW,wBAAX;AACD;;AAED,UAAM,IAAI,GAAG,YAAY,CAAC,OAAb,CAAqB,KAAK,GAA1B,CAAb;;AACA,QAAI,CAAC,IAAL,EAAW;AACT,YAAM,WAAW,GAAG,IAAI,WAAJ,CAAgB,EAAhB,CAApB;AACA,WAAK,cAAL,CAAoB,WAApB;AACD;AACF;;AAED,EAAA,cAAc,GAAA;AACZ,UAAM,IAAI,GAAG,YAAY,CAAC,OAAb,CAAqB,KAAK,GAA1B,CAAb;;AACA,QAAI,CAAC,IAAL,EAAW;AACT,YAAM,IAAI,kBAAJ,CAAuB,2CAAvB,CAAN;AACD;;AACD,UAAM,QAAQ,GAAG,IAAI,CAAC,KAAL,CAAW,IAAX,CAAjB;AACA,WAAO,WAAW,CAAC,QAAZ,CAAqB,QAArB,CAAP;AACD;;AAED,EAAA,cAAc,CAAC,OAAD,EAAqB;AACjC,IAAA,YAAY,CAAC,OAAb,CAAqB,KAAK,GAA1B,EAA+B,OAAO,CAAC,QAAR,EAA/B;AACA,WAAO,IAAP;AACD;;AAED,EAAA,iBAAiB,GAAA;AACf,IAAA,YAAY,CAAC,UAAb,CAAwB,KAAK,GAA7B;AACA,SAAK,cAAL,CAAoB,IAAI,WAAJ,CAAgB,EAAhB,CAApB;AACA,WAAO,IAAP;AACD;;AAzCoD","sourceRoot":"","sourcesContent":["import { SessionData } from './sessionData';\nimport { LOCALSTORAGE_SESSION_KEY } from './constants';\nimport { NoSessionDataError } from '@stacks/common';\nexport class SessionDataStore {\n    constructor(sessionOptions) {\n        if (sessionOptions) {\n            const newSessionData = new SessionData(sessionOptions);\n            this.setSessionData(newSessionData);\n        }\n    }\n    getSessionData() {\n        throw new Error('Abstract class');\n    }\n    setSessionData(_session) {\n        throw new Error('Abstract class');\n    }\n    deleteSessionData() {\n        throw new Error('Abstract class');\n    }\n}\nexport class InstanceDataStore extends SessionDataStore {\n    constructor(sessionOptions) {\n        super(sessionOptions);\n        if (!this.sessionData) {\n            this.setSessionData(new SessionData({}));\n        }\n    }\n    getSessionData() {\n        if (!this.sessionData) {\n            throw new NoSessionDataError('No session data was found.');\n        }\n        return this.sessionData;\n    }\n    setSessionData(session) {\n        this.sessionData = session;\n        return true;\n    }\n    deleteSessionData() {\n        this.setSessionData(new SessionData({}));\n        return true;\n    }\n}\nexport class LocalStorageStore extends SessionDataStore {\n    constructor(sessionOptions) {\n        super(sessionOptions);\n        if (sessionOptions &&\n            sessionOptions.storeOptions &&\n            sessionOptions.storeOptions.localStorageKey &&\n            typeof sessionOptions.storeOptions.localStorageKey === 'string') {\n            this.key = sessionOptions.storeOptions.localStorageKey;\n        }\n        else {\n            this.key = LOCALSTORAGE_SESSION_KEY;\n        }\n        const data = localStorage.getItem(this.key);\n        if (!data) {\n            const sessionData = new SessionData({});\n            this.setSessionData(sessionData);\n        }\n    }\n    getSessionData() {\n        const data = localStorage.getItem(this.key);\n        if (!data) {\n            throw new NoSessionDataError('No session data was found in localStorage');\n        }\n        const dataJSON = JSON.parse(data);\n        return SessionData.fromJSON(dataJSON);\n    }\n    setSessionData(session) {\n        localStorage.setItem(this.key, session.toString());\n        return true;\n    }\n    deleteSessionData() {\n        localStorage.removeItem(this.key);\n        this.setSessionData(new SessionData({}));\n        return true;\n    }\n}\n//# sourceMappingURL=sessionStore.js.map"]},"metadata":{},"sourceType":"module"}