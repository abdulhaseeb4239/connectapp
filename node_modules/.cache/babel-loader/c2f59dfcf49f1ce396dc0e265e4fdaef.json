{"ast":null,"code":"import { Buffer } from '@stacks/common';\nimport { SmartBuffer } from 'smart-buffer';\n\nfunction createEnumChecker(enumVariable) {\n  const enumValues = Object.values(enumVariable).filter(v => typeof v === 'number');\n  const enumValueSet = new Set(enumValues);\n  return value => enumValueSet.has(value);\n}\n\nconst enumCheckFunctions = new Map();\nexport function isEnum(enumVariable, value) {\n  const checker = enumCheckFunctions.get(enumVariable);\n\n  if (checker !== undefined) {\n    return checker(value);\n  }\n\n  const newChecker = createEnumChecker(enumVariable);\n  enumCheckFunctions.set(enumVariable, newChecker);\n  return isEnum(enumVariable, value);\n}\nexport class BufferReader {\n  constructor(options) {\n    if (Buffer.isBuffer(options)) {\n      this.smartBuffer = new SmartBuffer({\n        buff: options\n      });\n    } else {\n      this.smartBuffer = new SmartBuffer(options);\n    }\n  }\n\n  static fromBuffer(buffer) {\n    return new BufferReader({\n      buff: buffer\n    });\n  }\n\n  readBuffer(length) {\n    return this.smartBuffer.readBuffer(length);\n  }\n\n  readUInt32BE(offset) {\n    return this.smartBuffer.readUInt32BE(offset);\n  }\n\n  readUInt8() {\n    return this.smartBuffer.readUInt8();\n  }\n\n  readUInt16BE() {\n    return this.smartBuffer.readUInt16BE();\n  }\n\n  readBigUIntLE(length) {\n    const buffer = Buffer.from(this.smartBuffer.readBuffer(length)).reverse();\n    const hex = buffer.toString();\n    const num = BigInt(`0x${hex}`);\n    return num;\n  }\n\n  readBigUIntBE(length) {\n    const buffer = this.smartBuffer.readBuffer(length);\n    const hex = buffer.toString('hex');\n    const num = BigInt(`0x${hex}`);\n    return num;\n  }\n\n  readBigUInt64BE() {\n    return this.smartBuffer.readBigUInt64BE();\n  }\n\n  readString(arg, encoding) {\n    return this.smartBuffer.readString(arg, encoding);\n  }\n\n  get readOffset() {\n    return this.smartBuffer.readOffset;\n  }\n\n  set readOffset(val) {\n    this.smartBuffer.readOffset = val;\n  }\n\n  get internalBuffer() {\n    return this.smartBuffer.internalBuffer;\n  }\n\n  readUInt8Enum(enumVariable, invalidEnumErrorFormatter) {\n    const num = this.smartBuffer.readUInt8();\n\n    if (isEnum(enumVariable, num)) {\n      return num;\n    } else {\n      throw invalidEnumErrorFormatter(num);\n    }\n  }\n\n}","map":{"version":3,"sources":["../../src/bufferReader.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { Buffer } from '@stacks/common';\nimport { SmartBuffer } from 'smart-buffer';\nfunction createEnumChecker(enumVariable) {\n    const enumValues = Object.values(enumVariable).filter(v => typeof v === 'number');\n    const enumValueSet = new Set(enumValues);\n    return (value) => enumValueSet.has(value);\n}\nconst enumCheckFunctions = new Map();\nexport function isEnum(enumVariable, value) {\n    const checker = enumCheckFunctions.get(enumVariable);\n    if (checker !== undefined) {\n        return checker(value);\n    }\n    const newChecker = createEnumChecker(enumVariable);\n    enumCheckFunctions.set(enumVariable, newChecker);\n    return isEnum(enumVariable, value);\n}\nexport class BufferReader {\n    constructor(options) {\n        if (Buffer.isBuffer(options)) {\n            this.smartBuffer = new SmartBuffer({ buff: options });\n        }\n        else {\n            this.smartBuffer = new SmartBuffer(options);\n        }\n    }\n    static fromBuffer(buffer) {\n        return new BufferReader({ buff: buffer });\n    }\n    readBuffer(length) {\n        return this.smartBuffer.readBuffer(length);\n    }\n    readUInt32BE(offset) {\n        return this.smartBuffer.readUInt32BE(offset);\n    }\n    readUInt8() {\n        return this.smartBuffer.readUInt8();\n    }\n    readUInt16BE() {\n        return this.smartBuffer.readUInt16BE();\n    }\n    readBigUIntLE(length) {\n        const buffer = Buffer.from(this.smartBuffer.readBuffer(length)).reverse();\n        const hex = buffer.toString();\n        const num = BigInt(`0x${hex}`);\n        return num;\n    }\n    readBigUIntBE(length) {\n        const buffer = this.smartBuffer.readBuffer(length);\n        const hex = buffer.toString('hex');\n        const num = BigInt(`0x${hex}`);\n        return num;\n    }\n    readBigUInt64BE() {\n        return this.smartBuffer.readBigUInt64BE();\n    }\n    readString(arg, encoding) {\n        return this.smartBuffer.readString(arg, encoding);\n    }\n    get readOffset() {\n        return this.smartBuffer.readOffset;\n    }\n    set readOffset(val) {\n        this.smartBuffer.readOffset = val;\n    }\n    get internalBuffer() {\n        return this.smartBuffer.internalBuffer;\n    }\n    readUInt8Enum(enumVariable, invalidEnumErrorFormatter) {\n        const num = this.smartBuffer.readUInt8();\n        if (isEnum(enumVariable, num)) {\n            return num;\n        }\n        else {\n            throw invalidEnumErrorFormatter(num);\n        }\n    }\n}\n//# sourceMappingURL=bufferReader.js.map"]},"metadata":{},"sourceType":"module"}