{"ast":null,"code":"import { resolveZoneFileToProfile } from '@stacks/profile';\nimport { fetchPrivate } from '@stacks/common';\nimport { StacksMainnet } from '@stacks/network';\nexport function lookupProfile(options) {\n  if (!options.username) {\n    return Promise.reject();\n  }\n\n  const network = options.network ? options.network : new StacksMainnet();\n  let lookupPromise;\n\n  if (options.zoneFileLookupURL) {\n    const url = `${options.zoneFileLookupURL.replace(/\\/$/, '')}/${options.username}`;\n    lookupPromise = fetchPrivate(url).then(response => response.json());\n  } else {\n    lookupPromise = network.getNameInfo(options.username);\n  }\n\n  return lookupPromise.then(responseJSON => {\n    if (responseJSON.hasOwnProperty('zonefile') && responseJSON.hasOwnProperty('address')) {\n      return resolveZoneFileToProfile(responseJSON.zonefile, responseJSON.address);\n    } else {\n      throw new Error('Invalid zonefile lookup response: did not contain `address`' + ' or `zonefile` field');\n    }\n  });\n}","map":{"version":3,"sources":["../../src/profile.ts"],"names":[],"mappings":"AAAA,SAAS,wBAAT,QAAyC,iBAAzC;AACA,SAAS,YAAT,QAA6B,gBAA7B;AACA,SAAwB,aAAxB,QAA6C,iBAA7C;AAiBA,OAAM,SAAU,aAAV,CAAwB,OAAxB,EAAqD;AACzD,MAAI,CAAC,OAAO,CAAC,QAAb,EAAuB;AACrB,WAAO,OAAO,CAAC,MAAR,EAAP;AACD;;AACD,QAAM,OAAO,GAAkB,OAAO,CAAC,OAAR,GAAkB,OAAO,CAAC,OAA1B,GAAoC,IAAI,aAAJ,EAAnE;AACA,MAAI,aAAJ;;AACA,MAAI,OAAO,CAAC,iBAAZ,EAA+B;AAC7B,UAAM,GAAG,GAAG,GAAG,OAAO,CAAC,iBAAR,CAA0B,OAA1B,CAAkC,KAAlC,EAAyC,EAAzC,CAA4C,IAAI,OAAO,CAAC,QAAQ,EAA/E;AACA,IAAA,aAAa,GAAG,YAAY,CAAC,GAAD,CAAZ,CAAkB,IAAlB,CAAuB,QAAQ,IAAI,QAAQ,CAAC,IAAT,EAAnC,CAAhB;AACD,GAHD,MAGO;AACL,IAAA,aAAa,GAAG,OAAO,CAAC,WAAR,CAAoB,OAAO,CAAC,QAA5B,CAAhB;AACD;;AACD,SAAO,aAAa,CAAC,IAAd,CAAoB,YAAD,IAAsB;AAC9C,QAAI,YAAY,CAAC,cAAb,CAA4B,UAA5B,KAA2C,YAAY,CAAC,cAAb,CAA4B,SAA5B,CAA/C,EAAuF;AACrF,aAAO,wBAAwB,CAAC,YAAY,CAAC,QAAd,EAAwB,YAAY,CAAC,OAArC,CAA/B;AACD,KAFD,MAEO;AACL,YAAM,IAAI,KAAJ,CACJ,gEAAgE,sBAD5D,CAAN;AAGD;AACF,GARM,CAAP;AASD","sourceRoot":"","sourcesContent":["import { resolveZoneFileToProfile } from '@stacks/profile';\nimport { fetchPrivate } from '@stacks/common';\nimport { StacksMainnet } from '@stacks/network';\nexport function lookupProfile(options) {\n    if (!options.username) {\n        return Promise.reject();\n    }\n    const network = options.network ? options.network : new StacksMainnet();\n    let lookupPromise;\n    if (options.zoneFileLookupURL) {\n        const url = `${options.zoneFileLookupURL.replace(/\\/$/, '')}/${options.username}`;\n        lookupPromise = fetchPrivate(url).then(response => response.json());\n    }\n    else {\n        lookupPromise = network.getNameInfo(options.username);\n    }\n    return lookupPromise.then((responseJSON) => {\n        if (responseJSON.hasOwnProperty('zonefile') && responseJSON.hasOwnProperty('address')) {\n            return resolveZoneFileToProfile(responseJSON.zonefile, responseJSON.address);\n        }\n        else {\n            throw new Error('Invalid zonefile lookup response: did not contain `address`' + ' or `zonefile` field');\n        }\n    });\n}\n//# sourceMappingURL=profile.js.map"]},"metadata":{},"sourceType":"module"}