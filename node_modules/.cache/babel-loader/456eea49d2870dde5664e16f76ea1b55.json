{"ast":null,"code":"import { Buffer } from '@stacks/common';\nimport { createAddress, createLPString, addressToString } from '../../types';\nimport { ClarityType } from '../clarityValue';\n\nfunction principalToString(principal) {\n  if (principal.type === ClarityType.PrincipalStandard) {\n    return addressToString(principal.address);\n  } else if (principal.type === ClarityType.PrincipalContract) {\n    const address = addressToString(principal.address);\n    return `${address}.${principal.contractName.content}`;\n  } else {\n    throw new Error(`Unexpected principal data: ${JSON.stringify(principal)}`);\n  }\n}\n\nfunction principalCV(principal) {\n  if (principal.includes('.')) {\n    const [address, contractName] = principal.split('.');\n    return contractPrincipalCV(address, contractName);\n  } else {\n    return standardPrincipalCV(principal);\n  }\n}\n\nfunction standardPrincipalCV(addressString) {\n  const addr = createAddress(addressString);\n  return {\n    type: ClarityType.PrincipalStandard,\n    address: addr\n  };\n}\n\nfunction standardPrincipalCVFromAddress(address) {\n  return {\n    type: ClarityType.PrincipalStandard,\n    address\n  };\n}\n\nfunction contractPrincipalCV(addressString, contractName) {\n  const addr = createAddress(addressString);\n  const lengthPrefixedContractName = createLPString(contractName);\n  return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\n\nfunction contractPrincipalCVFromAddress(address, contractName) {\n  if (Buffer.byteLength(contractName.content) >= 128) {\n    throw new Error('Contract name must be less than 128 bytes');\n  }\n\n  return {\n    type: ClarityType.PrincipalContract,\n    address,\n    contractName\n  };\n}\n\nfunction contractPrincipalCVFromStandard(sp, contractName) {\n  const lengthPrefixedContractName = createLPString(contractName);\n  return {\n    type: ClarityType.PrincipalContract,\n    address: sp.address,\n    contractName: lengthPrefixedContractName\n  };\n}\n\nexport { principalCV, principalToString, standardPrincipalCV, standardPrincipalCVFromAddress, contractPrincipalCV, contractPrincipalCVFromAddress, contractPrincipalCVFromStandard };","map":{"version":3,"sources":["../../../../src/clarity/types/principalCV.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,gBAAvB;AACA,SAGE,aAHF,EAIE,cAJF,EAKE,eALF,QAMO,aANP;AAOA,SAAS,WAAT,QAA4B,iBAA5B;;AAeA,SAAS,iBAAT,CAA2B,SAA3B,EAAiD;AAC/C,MAAI,SAAS,CAAC,IAAV,KAAmB,WAAW,CAAC,iBAAnC,EAAsD;AACpD,WAAO,eAAe,CAAC,SAAS,CAAC,OAAX,CAAtB;AACD,GAFD,MAEO,IAAI,SAAS,CAAC,IAAV,KAAmB,WAAW,CAAC,iBAAnC,EAAsD;AAC3D,UAAM,OAAO,GAAG,eAAe,CAAC,SAAS,CAAC,OAAX,CAA/B;AACA,WAAO,GAAG,OAAO,IAAI,SAAS,CAAC,YAAV,CAAuB,OAAO,EAAnD;AACD,GAHM,MAGA;AACL,UAAM,IAAI,KAAJ,CAAU,8BAA8B,IAAI,CAAC,SAAL,CAAe,SAAf,CAAyB,EAAjE,CAAN;AACD;AACF;;AAED,SAAS,WAAT,CAAqB,SAArB,EAAsC;AACpC,MAAI,SAAS,CAAC,QAAV,CAAmB,GAAnB,CAAJ,EAA6B;AAC3B,UAAM,CAAC,OAAD,EAAU,YAAV,IAA0B,SAAS,CAAC,KAAV,CAAgB,GAAhB,CAAhC;AACA,WAAO,mBAAmB,CAAC,OAAD,EAAU,YAAV,CAA1B;AACD,GAHD,MAGO;AACL,WAAO,mBAAmB,CAAC,SAAD,CAA1B;AACD;AACF;;AAED,SAAS,mBAAT,CAA6B,aAA7B,EAAkD;AAChD,QAAM,IAAI,GAAG,aAAa,CAAC,aAAD,CAA1B;AACA,SAAO;AAAE,IAAA,IAAI,EAAE,WAAW,CAAC,iBAApB;AAAuC,IAAA,OAAO,EAAE;AAAhD,GAAP;AACD;;AAED,SAAS,8BAAT,CAAwC,OAAxC,EAAwD;AACtD,SAAO;AAAE,IAAA,IAAI,EAAE,WAAW,CAAC,iBAApB;AAAuC,IAAA;AAAvC,GAAP;AACD;;AAED,SAAS,mBAAT,CAA6B,aAA7B,EAAoD,YAApD,EAAwE;AACtE,QAAM,IAAI,GAAG,aAAa,CAAC,aAAD,CAA1B;AACA,QAAM,0BAA0B,GAAG,cAAc,CAAC,YAAD,CAAjD;AACA,SAAO,8BAA8B,CAAC,IAAD,EAAO,0BAAP,CAArC;AACD;;AAED,SAAS,8BAAT,CACE,OADF,EAEE,YAFF,EAEoC;AAElC,MAAI,MAAM,CAAC,UAAP,CAAkB,YAAY,CAAC,OAA/B,KAA2C,GAA/C,EAAoD;AAClD,UAAM,IAAI,KAAJ,CAAU,2CAAV,CAAN;AACD;;AACD,SAAO;AAAE,IAAA,IAAI,EAAE,WAAW,CAAC,iBAApB;AAAuC,IAAA,OAAvC;AAAgD,IAAA;AAAhD,GAAP;AACD;;AAED,SAAS,+BAAT,CACE,EADF,EAEE,YAFF,EAEsB;AAEpB,QAAM,0BAA0B,GAAG,cAAc,CAAC,YAAD,CAAjD;AACA,SAAO;AACL,IAAA,IAAI,EAAE,WAAW,CAAC,iBADb;AAEL,IAAA,OAAO,EAAE,EAAE,CAAC,OAFP;AAGL,IAAA,YAAY,EAAE;AAHT,GAAP;AAKD;;AAED,SAIE,WAJF,EAKE,iBALF,EAME,mBANF,EAOE,8BAPF,EAQE,mBARF,EASE,8BATF,EAUE,+BAVF","sourceRoot":"","sourcesContent":["import { Buffer } from '@stacks/common';\nimport { createAddress, createLPString, addressToString, } from '../../types';\nimport { ClarityType } from '../clarityValue';\nfunction principalToString(principal) {\n    if (principal.type === ClarityType.PrincipalStandard) {\n        return addressToString(principal.address);\n    }\n    else if (principal.type === ClarityType.PrincipalContract) {\n        const address = addressToString(principal.address);\n        return `${address}.${principal.contractName.content}`;\n    }\n    else {\n        throw new Error(`Unexpected principal data: ${JSON.stringify(principal)}`);\n    }\n}\nfunction principalCV(principal) {\n    if (principal.includes('.')) {\n        const [address, contractName] = principal.split('.');\n        return contractPrincipalCV(address, contractName);\n    }\n    else {\n        return standardPrincipalCV(principal);\n    }\n}\nfunction standardPrincipalCV(addressString) {\n    const addr = createAddress(addressString);\n    return { type: ClarityType.PrincipalStandard, address: addr };\n}\nfunction standardPrincipalCVFromAddress(address) {\n    return { type: ClarityType.PrincipalStandard, address };\n}\nfunction contractPrincipalCV(addressString, contractName) {\n    const addr = createAddress(addressString);\n    const lengthPrefixedContractName = createLPString(contractName);\n    return contractPrincipalCVFromAddress(addr, lengthPrefixedContractName);\n}\nfunction contractPrincipalCVFromAddress(address, contractName) {\n    if (Buffer.byteLength(contractName.content) >= 128) {\n        throw new Error('Contract name must be less than 128 bytes');\n    }\n    return { type: ClarityType.PrincipalContract, address, contractName };\n}\nfunction contractPrincipalCVFromStandard(sp, contractName) {\n    const lengthPrefixedContractName = createLPString(contractName);\n    return {\n        type: ClarityType.PrincipalContract,\n        address: sp.address,\n        contractName: lengthPrefixedContractName,\n    };\n}\nexport { principalCV, principalToString, standardPrincipalCV, standardPrincipalCVFromAddress, contractPrincipalCV, contractPrincipalCVFromAddress, contractPrincipalCVFromStandard, };\n//# sourceMappingURL=principalCV.js.map"]},"metadata":{},"sourceType":"module"}