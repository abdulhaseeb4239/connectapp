{"ast":null,"code":"import { Buffer } from '@stacks/common';\nimport { getCryptoLib } from './cryptoUtils';\nexport class NodeCryptoHmacSha256 {\n  constructor(createHmac) {\n    this.createHmac = createHmac;\n  }\n\n  async digest(key, data) {\n    const result = this.createHmac('sha256', key).update(data).digest();\n    return Promise.resolve(result);\n  }\n\n}\nexport class WebCryptoHmacSha256 {\n  constructor(subtleCrypto) {\n    this.subtleCrypto = subtleCrypto;\n  }\n\n  async digest(key, data) {\n    const cryptoKey = await this.subtleCrypto.importKey('raw', key, {\n      name: 'HMAC',\n      hash: 'SHA-256'\n    }, true, ['sign']);\n    const sig = await this.subtleCrypto.sign({\n      name: 'HMAC',\n      hash: 'SHA-256'\n    }, cryptoKey, data);\n    return Buffer.from(sig);\n  }\n\n}\nexport async function createHmacSha256() {\n  const cryptoLib = await getCryptoLib();\n\n  if (cryptoLib.name === 'subtleCrypto') {\n    return new WebCryptoHmacSha256(cryptoLib.lib);\n  } else {\n    return new NodeCryptoHmacSha256(cryptoLib.lib.createHmac);\n  }\n}","map":{"version":3,"sources":["../../src/hmacSha256.ts"],"names":[],"mappings":"AAAA,SAAS,MAAT,QAAuB,gBAAvB;AACA,SAAS,YAAT,QAA6B,eAA7B;AAQA,OAAM,MAAO,oBAAP,CAA2B;AAG/B,EAAA,WAAA,CAAY,UAAZ,EAA4C;AAC1C,SAAK,UAAL,GAAkB,UAAlB;AACD;;AAEW,QAAN,MAAM,CAAC,GAAD,EAAc,IAAd,EAA0B;AACpC,UAAM,MAAM,GAAG,KAAK,UAAL,CAAgB,QAAhB,EAA0B,GAA1B,EAA+B,MAA/B,CAAsC,IAAtC,EAA4C,MAA5C,EAAf;AACA,WAAO,OAAO,CAAC,OAAR,CAAgB,MAAhB,CAAP;AACD;;AAV8B;AAajC,OAAM,MAAO,mBAAP,CAA0B;AAG9B,EAAA,WAAA,CAAY,YAAZ,EAAsC;AACpC,SAAK,YAAL,GAAoB,YAApB;AACD;;AAEW,QAAN,MAAM,CAAC,GAAD,EAAc,IAAd,EAA0B;AACpC,UAAM,SAAS,GAAG,MAAM,KAAK,YAAL,CAAkB,SAAlB,CACtB,KADsB,EAEtB,GAFsB,EAGtB;AAAE,MAAA,IAAI,EAAE,MAAR;AAAgB,MAAA,IAAI,EAAE;AAAtB,KAHsB,EAItB,IAJsB,EAKtB,CAAC,MAAD,CALsB,CAAxB;AAOA,UAAM,GAAG,GAAG,MAAM,KAAK,YAAL,CAAkB,IAAlB,CAEhB;AAAE,MAAA,IAAI,EAAE,MAAR;AAAgB,MAAA,IAAI,EAAE;AAAtB,KAFgB,EAGhB,SAHgB,EAIhB,IAJgB,CAAlB;AAMA,WAAO,MAAM,CAAC,IAAP,CAAY,GAAZ,CAAP;AACD;;AAtB6B;AAyBhC,OAAO,eAAe,gBAAf,GAA+B;AACpC,QAAM,SAAS,GAAG,MAAM,YAAY,EAApC;;AACA,MAAI,SAAS,CAAC,IAAV,KAAmB,cAAvB,EAAuC;AACrC,WAAO,IAAI,mBAAJ,CAAwB,SAAS,CAAC,GAAlC,CAAP;AACD,GAFD,MAEO;AACL,WAAO,IAAI,oBAAJ,CAAyB,SAAS,CAAC,GAAV,CAAc,UAAvC,CAAP;AACD;AACF","sourceRoot":"","sourcesContent":["import { Buffer } from '@stacks/common';\nimport { getCryptoLib } from './cryptoUtils';\nexport class NodeCryptoHmacSha256 {\n    constructor(createHmac) {\n        this.createHmac = createHmac;\n    }\n    async digest(key, data) {\n        const result = this.createHmac('sha256', key).update(data).digest();\n        return Promise.resolve(result);\n    }\n}\nexport class WebCryptoHmacSha256 {\n    constructor(subtleCrypto) {\n        this.subtleCrypto = subtleCrypto;\n    }\n    async digest(key, data) {\n        const cryptoKey = await this.subtleCrypto.importKey('raw', key, { name: 'HMAC', hash: 'SHA-256' }, true, ['sign']);\n        const sig = await this.subtleCrypto.sign({ name: 'HMAC', hash: 'SHA-256' }, cryptoKey, data);\n        return Buffer.from(sig);\n    }\n}\nexport async function createHmacSha256() {\n    const cryptoLib = await getCryptoLib();\n    if (cryptoLib.name === 'subtleCrypto') {\n        return new WebCryptoHmacSha256(cryptoLib.lib);\n    }\n    else {\n        return new NodeCryptoHmacSha256(cryptoLib.lib.createHmac);\n    }\n}\n//# sourceMappingURL=hmacSha256.js.map"]},"metadata":{},"sourceType":"module"}