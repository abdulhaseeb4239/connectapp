{"ast":null,"code":"import { parseZoneFile } from 'zone-file';\nimport { getTokenFileUrl, Person } from '../profile';\nimport { extractProfile } from '../profileTokens';\nimport { fetchPrivate } from '@stacks/common';\nexport function resolveZoneFileToPerson(zoneFile, publicKeyOrAddress, callback) {\n  let zoneFileJson = null;\n\n  try {\n    zoneFileJson = parseZoneFile(zoneFile);\n\n    if (!zoneFileJson.hasOwnProperty('$origin')) {\n      zoneFileJson = null;\n      throw new Error('zone file is missing an origin');\n    }\n  } catch (e) {\n    console.error(e);\n  }\n\n  let tokenFileUrl = null;\n\n  if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n    tokenFileUrl = getTokenFileUrl(zoneFileJson);\n  } else {\n    let profile = null;\n\n    try {\n      profile = JSON.parse(zoneFile);\n      const person = Person.fromLegacyFormat(profile);\n      profile = person.profile();\n    } catch (error) {\n      console.warn(error);\n    }\n\n    callback(profile);\n    return;\n  }\n\n  if (tokenFileUrl) {\n    fetchPrivate(tokenFileUrl).then(response => response.text()).then(responseText => JSON.parse(responseText)).then(responseJson => {\n      const tokenRecords = responseJson;\n      const token = tokenRecords[0].token;\n      const profile = extractProfile(token, publicKeyOrAddress);\n      callback(profile);\n    }).catch(error => {\n      console.warn(error);\n    });\n  } else {\n    console.warn('Token file url not found');\n    callback({});\n  }\n}","map":{"version":3,"sources":["../../../src/profileSchemas/personZoneFiles.ts"],"names":[],"mappings":"AACA,SAAS,aAAT,QAA8B,WAA9B;AAEA,SAAS,eAAT,EAA0B,MAA1B,QAAwC,YAAxC;AACA,SAAS,cAAT,QAA+B,kBAA/B;AACA,SAAS,YAAT,QAA6B,gBAA7B;AAUA,OAAM,SAAU,uBAAV,CACJ,QADI,EAEJ,kBAFI,EAGJ,QAHI,EAG4B;AAEhC,MAAI,YAAY,GAAG,IAAnB;;AACA,MAAI;AACF,IAAA,YAAY,GAAG,aAAa,CAAC,QAAD,CAA5B;;AACA,QAAI,CAAC,YAAY,CAAC,cAAb,CAA4B,SAA5B,CAAL,EAA6C;AAC3C,MAAA,YAAY,GAAG,IAAf;AACA,YAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;AACF,GAND,CAME,OAAO,CAAP,EAAU;AACV,IAAA,OAAO,CAAC,KAAR,CAAc,CAAd;AACD;;AAED,MAAI,YAAY,GAAG,IAAnB;;AACA,MAAI,YAAY,IAAI,MAAM,CAAC,IAAP,CAAY,YAAZ,EAA0B,MAA1B,GAAmC,CAAvD,EAA0D;AACxD,IAAA,YAAY,GAAG,eAAe,CAAC,YAAD,CAA9B;AACD,GAFD,MAEO;AACL,QAAI,OAAO,GAAG,IAAd;;AACA,QAAI;AACF,MAAA,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,QAAX,CAAV;AACA,YAAM,MAAM,GAAG,MAAM,CAAC,gBAAP,CAAwB,OAAxB,CAAf;AACA,MAAA,OAAO,GAAG,MAAM,CAAC,OAAP,EAAV;AACD,KAJD,CAIE,OAAO,KAAP,EAAc;AACd,MAAA,OAAO,CAAC,IAAR,CAAa,KAAb;AACD;;AACD,IAAA,QAAQ,CAAC,OAAD,CAAR;AACA;AACD;;AAED,MAAI,YAAJ,EAAkB;AAChB,IAAA,YAAY,CAAC,YAAD,CAAZ,CACG,IADH,CACQ,QAAQ,IAAI,QAAQ,CAAC,IAAT,EADpB,EAEG,IAFH,CAEQ,YAAY,IAAI,IAAI,CAAC,KAAL,CAAW,YAAX,CAFxB,EAGG,IAHH,CAGQ,YAAY,IAAG;AACnB,YAAM,YAAY,GAAG,YAArB;AACA,YAAM,KAAK,GAAG,YAAY,CAAC,CAAD,CAAZ,CAAgB,KAA9B;AACA,YAAM,OAAO,GAAG,cAAc,CAAC,KAAD,EAAQ,kBAAR,CAA9B;AAEA,MAAA,QAAQ,CAAC,OAAD,CAAR;AACD,KATH,EAUG,KAVH,CAUS,KAAK,IAAG;AACb,MAAA,OAAO,CAAC,IAAR,CAAa,KAAb;AACD,KAZH;AAaD,GAdD,MAcO;AACL,IAAA,OAAO,CAAC,IAAR,CAAa,0BAAb;AACA,IAAA,QAAQ,CAAC,EAAD,CAAR;AACD;AACF","sourceRoot":"","sourcesContent":["import { parseZoneFile } from 'zone-file';\nimport { getTokenFileUrl, Person } from '../profile';\nimport { extractProfile } from '../profileTokens';\nimport { fetchPrivate } from '@stacks/common';\nexport function resolveZoneFileToPerson(zoneFile, publicKeyOrAddress, callback) {\n    let zoneFileJson = null;\n    try {\n        zoneFileJson = parseZoneFile(zoneFile);\n        if (!zoneFileJson.hasOwnProperty('$origin')) {\n            zoneFileJson = null;\n            throw new Error('zone file is missing an origin');\n        }\n    }\n    catch (e) {\n        console.error(e);\n    }\n    let tokenFileUrl = null;\n    if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n        tokenFileUrl = getTokenFileUrl(zoneFileJson);\n    }\n    else {\n        let profile = null;\n        try {\n            profile = JSON.parse(zoneFile);\n            const person = Person.fromLegacyFormat(profile);\n            profile = person.profile();\n        }\n        catch (error) {\n            console.warn(error);\n        }\n        callback(profile);\n        return;\n    }\n    if (tokenFileUrl) {\n        fetchPrivate(tokenFileUrl)\n            .then(response => response.text())\n            .then(responseText => JSON.parse(responseText))\n            .then(responseJson => {\n            const tokenRecords = responseJson;\n            const token = tokenRecords[0].token;\n            const profile = extractProfile(token, publicKeyOrAddress);\n            callback(profile);\n        })\n            .catch(error => {\n            console.warn(error);\n        });\n    }\n    else {\n        console.warn('Token file url not found');\n        callback({});\n    }\n}\n//# sourceMappingURL=personZoneFiles.js.map"]},"metadata":{},"sourceType":"module"}