{"ast":null,"code":"import * as queryString from 'query-string';\nimport { decodeToken } from 'jsontokens';\nimport { BLOCKSTACK_HANDLER, getGlobalObject, fetchPrivate } from '@stacks/common';\nexport function getAuthRequestFromURL() {\n  const location = getGlobalObject('location', {\n    throwIfUnavailable: true,\n    usageDesc: 'getAuthRequestFromURL'\n  });\n\n  if (location === null || location === void 0 ? void 0 : location.search) {\n    const queryDict = queryString.parse(location === null || location === void 0 ? void 0 : location.search);\n\n    if (queryDict.authRequest) {\n      return queryDict.authRequest.split(`${BLOCKSTACK_HANDLER}:`).join('');\n    } else {\n      return null;\n    }\n  } else {\n    return null;\n  }\n}\nexport async function fetchAppManifest(authRequest) {\n  if (!authRequest) {\n    throw new Error('Invalid auth request');\n  }\n\n  const payload = decodeToken(authRequest).payload;\n\n  if (typeof payload === 'string') {\n    throw new Error('Unexpected token payload type of string');\n  }\n\n  const manifestURI = payload.manifest_uri;\n\n  try {\n    const response = await fetchPrivate(manifestURI);\n    const responseText = await response.text();\n    const responseJSON = JSON.parse(responseText);\n    return Object.assign(Object.assign({}, responseJSON), {\n      manifestURI\n    });\n  } catch (error) {\n    console.log(error);\n    throw new Error('Could not fetch manifest.json');\n  }\n}","map":{"version":3,"sources":["../../src/provider.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,WAAZ,MAA6B,cAA7B;AACA,SAAS,WAAT,QAA4B,YAA5B;AACA,SAAS,kBAAT,EAA6B,eAA7B,EAA8C,YAA9C,QAAkE,gBAAlE;AASA,OAAM,SAAU,qBAAV,GAA+B;AACnC,QAAM,QAAQ,GAAG,eAAe,CAAC,UAAD,EAAa;AAC3C,IAAA,kBAAkB,EAAE,IADuB;AAE3C,IAAA,SAAS,EAAE;AAFgC,GAAb,CAAhC;;AAIA,MAAI,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,MAAd,EAAsB;AACpB,UAAM,SAAS,GAAG,WAAW,CAAC,KAAZ,CAAkB,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,MAA5B,CAAlB;;AACA,QAAI,SAAS,CAAC,WAAd,EAA2B;AACzB,aAAQ,SAAS,CAAC,WAAV,CAAiC,KAAjC,CAAuC,GAAG,kBAAkB,GAA5D,EAAiE,IAAjE,CAAsE,EAAtE,CAAR;AACD,KAFD,MAEO;AACL,aAAO,IAAP;AACD;AACF,GAPD,MAOO;AACL,WAAO,IAAP;AACD;AACF;AAYD,OAAO,eAAe,gBAAf,CAAgC,WAAhC,EAAmD;AACxD,MAAI,CAAC,WAAL,EAAkB;AAChB,UAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACD;;AACD,QAAM,OAAO,GAAG,WAAW,CAAC,WAAD,CAAX,CAAyB,OAAzC;;AACA,MAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,UAAM,IAAI,KAAJ,CAAU,yCAAV,CAAN;AACD;;AACD,QAAM,WAAW,GAAG,OAAO,CAAC,YAA5B;;AACA,MAAI;AAEF,UAAM,QAAQ,GAAG,MAAM,YAAY,CAAC,WAAD,CAAnC;AACA,UAAM,YAAY,GAAG,MAAM,QAAQ,CAAC,IAAT,EAA3B;AACA,UAAM,YAAY,GAAG,IAAI,CAAC,KAAL,CAAW,YAAX,CAArB;AACA,WAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EAAY,YAAZ,CAAA,EAAwB;AAAE,MAAA;AAAF,KAAxB,CAAA;AACD,GAND,CAME,OAAO,KAAP,EAAc;AACd,IAAA,OAAO,CAAC,GAAR,CAAY,KAAZ;AACA,UAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;AACF","sourceRoot":"","sourcesContent":["import * as queryString from 'query-string';\nimport { decodeToken } from 'jsontokens';\nimport { BLOCKSTACK_HANDLER, getGlobalObject, fetchPrivate } from '@stacks/common';\nexport function getAuthRequestFromURL() {\n    const location = getGlobalObject('location', {\n        throwIfUnavailable: true,\n        usageDesc: 'getAuthRequestFromURL',\n    });\n    if (location === null || location === void 0 ? void 0 : location.search) {\n        const queryDict = queryString.parse(location === null || location === void 0 ? void 0 : location.search);\n        if (queryDict.authRequest) {\n            return queryDict.authRequest.split(`${BLOCKSTACK_HANDLER}:`).join('');\n        }\n        else {\n            return null;\n        }\n    }\n    else {\n        return null;\n    }\n}\nexport async function fetchAppManifest(authRequest) {\n    if (!authRequest) {\n        throw new Error('Invalid auth request');\n    }\n    const payload = decodeToken(authRequest).payload;\n    if (typeof payload === 'string') {\n        throw new Error('Unexpected token payload type of string');\n    }\n    const manifestURI = payload.manifest_uri;\n    try {\n        const response = await fetchPrivate(manifestURI);\n        const responseText = await response.text();\n        const responseJSON = JSON.parse(responseText);\n        return Object.assign(Object.assign({}, responseJSON), { manifestURI });\n    }\n    catch (error) {\n        console.log(error);\n        throw new Error('Could not fetch manifest.json');\n    }\n}\n//# sourceMappingURL=provider.js.map"]},"metadata":{},"sourceType":"module"}