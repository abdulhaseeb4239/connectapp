{"ast":null,"code":"import { config } from './config.esm.js';\nvar levels = ['debug', 'info', 'warn', 'error', 'none'];\nvar levelToInt = {};\n\nfor (var index = 0; index < levels.length; index++) {\n  var level = levels[index];\n  levelToInt[level] = index;\n}\n\nvar Logger = /*#__PURE__*/function () {\n  function Logger() {}\n\n  Logger.error = function error(message) {\n    if (!this.shouldLog('error')) return;\n    console.error(this.logMessage('error', message));\n  };\n\n  Logger.warn = function warn(message) {\n    if (!this.shouldLog('warn')) return;\n    console.warn(this.logMessage('warn', message));\n  };\n\n  Logger.info = function info(message) {\n    if (!this.shouldLog('info')) return;\n    console.log(this.logMessage('info', message));\n  };\n\n  Logger.debug = function debug(message) {\n    if (!this.shouldLog('debug')) return;\n    console.log(this.logMessage('debug', message));\n  };\n\n  Logger.logMessage = function logMessage(level, message) {\n    return \"[\" + level.toUpperCase() + \"] \" + message;\n  };\n\n  Logger.shouldLog = function shouldLog(level) {\n    var currentLevel = levelToInt[config.logLevel];\n    return currentLevel <= levelToInt[level];\n  };\n\n  return Logger;\n}();\n\nexport { Logger };","map":{"version":3,"sources":["../src/logger.ts"],"names":["levels","levelToInt","index","level","Logger","console","currentLevel","config"],"mappings":";AAEA,IAAMA,MAAM,GAAG,CAAA,OAAA,EAAA,MAAA,EAAA,MAAA,EAAA,OAAA,EAAf,MAAe,CAAf;AAEA,IAAMC,UAAU,GAAhB,EAAA;;AAGA,KAAK,IAAIC,KAAK,GAAd,CAAA,EAAoBA,KAAK,GAAGF,MAAM,CAAlC,MAAA,EAA2CE,KAA3C,EAAA,EAAoD;AAClD,MAAMC,KAAK,GAAGH,MAAM,CAApB,KAAoB,CAApB;AACAC,EAAAA,UAAU,CAAVA,KAAU,CAAVA,GAAAA,KAAAA;AAED;;IAKYG,MAAb,GAAA,aAAA,YAAA;AAAA,WAAA,MAAA,GAAA,CAAA;;AAAA,EAAA,MAAA,CAAA,KAAA,GACE,SAAA,KAAA,CAAA,OAAA,EAAA;AACE,QAAI,CAAC,KAAA,SAAA,CAAL,OAAK,CAAL,EAA8B;AAC9BC,IAAAA,OAAO,CAAPA,KAAAA,CAAc,KAAA,UAAA,CAAA,OAAA,EAAdA,OAAc,CAAdA;AAHJ,GAAA;;AAAA,EAAA,MAAA,CAAA,IAAA,GAME,SAAA,IAAA,CAAA,OAAA,EAAA;AACE,QAAI,CAAC,KAAA,SAAA,CAAL,MAAK,CAAL,EAA6B;AAC7BA,IAAAA,OAAO,CAAPA,IAAAA,CAAa,KAAA,UAAA,CAAA,MAAA,EAAbA,OAAa,CAAbA;AARJ,GAAA;;AAAA,EAAA,MAAA,CAAA,IAAA,GAWE,SAAA,IAAA,CAAA,OAAA,EAAA;AACE,QAAI,CAAC,KAAA,SAAA,CAAL,MAAK,CAAL,EAA6B;AAC7BA,IAAAA,OAAO,CAAPA,GAAAA,CAAY,KAAA,UAAA,CAAA,MAAA,EAAZA,OAAY,CAAZA;AAbJ,GAAA;;AAAA,EAAA,MAAA,CAAA,KAAA,GAgBE,SAAA,KAAA,CAAA,OAAA,EAAA;AACE,QAAI,CAAC,KAAA,SAAA,CAAL,OAAK,CAAL,EAA8B;AAC9BA,IAAAA,OAAO,CAAPA,GAAAA,CAAY,KAAA,UAAA,CAAA,OAAA,EAAZA,OAAY,CAAZA;AAlBJ,GAAA;;AAAA,EAAA,MAAA,CAAA,UAAA,GAqBE,SAAA,UAAA,CAAA,KAAA,EAAA,OAAA,EAAA;AACE,WAAA,MAAWF,KAAK,CAAhB,WAAWA,EAAX,GAAA,IAAA,GAAA,OAAA;AAtBJ,GAAA;;AAAA,EAAA,MAAA,CAAA,SAAA,GAyBE,SAAA,SAAA,CAAA,KAAA,EAAA;AACE,QAAMG,YAAY,GAAGL,UAAU,CAACM,MAAM,CAAtC,QAA+B,CAA/B;AACA,WAAOD,YAAY,IAAIL,UAAU,CAAjC,KAAiC,CAAjC;AA3BJ,GAAA;;AAAA,SAAA,MAAA;AAAA,CAAA,E","sourcesContent":["import { config } from './config';\n\nconst levels = ['debug', 'info', 'warn', 'error', 'none'];\n\nconst levelToInt: { [level: string]: number } = {};\nconst intToLevel: { [int: number]: string } = {};\n\nfor (let index = 0; index < levels.length; index++) {\n  const level = levels[index];\n  levelToInt[level] = index;\n  intToLevel[index] = level;\n}\n\n/**\n * @ignore\n */\nexport class Logger {\n  static error(message: string) {\n    if (!this.shouldLog('error')) return;\n    console.error(this.logMessage('error', message));\n  }\n\n  static warn(message: string) {\n    if (!this.shouldLog('warn')) return;\n    console.warn(this.logMessage('warn', message));\n  }\n\n  static info(message: string) {\n    if (!this.shouldLog('info')) return;\n    console.log(this.logMessage('info', message));\n  }\n\n  static debug(message: string) {\n    if (!this.shouldLog('debug')) return;\n    console.log(this.logMessage('debug', message));\n  }\n\n  static logMessage(level: string, message: string) {\n    return `[${level.toUpperCase()}] ${message}`;\n  }\n\n  static shouldLog(level: string) {\n    const currentLevel = levelToInt[config.logLevel];\n    return currentLevel <= levelToInt[level];\n  }\n}\n"]},"metadata":{},"sourceType":"module"}