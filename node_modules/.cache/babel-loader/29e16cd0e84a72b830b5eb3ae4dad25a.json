{"ast":null,"code":"export function getName(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let name = null;\n\n  if (profile.name) {\n    name = profile.name;\n  } else if (profile.givenName || profile.familyName) {\n    name = '';\n\n    if (profile.givenName) {\n      name = profile.givenName;\n    }\n\n    if (profile.familyName) {\n      name += ` ${profile.familyName}`;\n    }\n  }\n\n  return name;\n}\nexport function getGivenName(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let givenName = null;\n\n  if (profile.givenName) {\n    givenName = profile.givenName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    givenName = nameParts.slice(0, -1).join(' ');\n  }\n\n  return givenName;\n}\nexport function getFamilyName(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let familyName = null;\n\n  if (profile.familyName) {\n    familyName = profile.familyName;\n  } else if (profile.name) {\n    const nameParts = profile.name.split(' ');\n    familyName = nameParts.pop();\n  }\n\n  return familyName;\n}\nexport function getDescription(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let description = null;\n\n  if (profile.description) {\n    description = profile.description;\n  }\n\n  return description;\n}\nexport function getAvatarUrl(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let avatarContentUrl = null;\n\n  if (profile.image) {\n    profile.image.map(image => {\n      if (image.name === 'avatar') {\n        avatarContentUrl = image.contentUrl;\n        return avatarContentUrl;\n      } else {\n        return null;\n      }\n    });\n  }\n\n  return avatarContentUrl;\n}\nexport function getVerifiedAccounts(profile, verifications) {\n  if (!profile) {\n    return null;\n  }\n\n  const filteredAccounts = [];\n\n  if (profile.hasOwnProperty('account') && verifications) {\n    profile.account.map(account => {\n      let accountIsValid = false;\n      let proofUrl = null;\n      verifications.map(verification => {\n        if (verification.hasOwnProperty('proof_url')) {\n          verification.proofUrl = verification.proof_url;\n        }\n\n        if (verification.valid && verification.service === account.service && verification.identifier === account.identifier && verification.proofUrl) {\n          accountIsValid = true;\n          proofUrl = verification.proofUrl;\n          return true;\n        } else {\n          return false;\n        }\n      });\n\n      if (accountIsValid) {\n        account.proofUrl = proofUrl;\n        filteredAccounts.push(account);\n        return account;\n      } else {\n        return null;\n      }\n    });\n  }\n\n  return filteredAccounts;\n}\nexport function getOrganizations(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  const organizations = [];\n\n  if (profile.hasOwnProperty('worksFor')) {\n    return profile.worksFor;\n  }\n\n  return organizations;\n}\nexport function getConnections(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let connections = [];\n\n  if (profile.hasOwnProperty('knows')) {\n    connections = profile.knows;\n  }\n\n  return connections;\n}\nexport function getAddress(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  let addressString = null;\n\n  if (profile.hasOwnProperty('address')) {\n    const addressParts = [];\n\n    if (profile.address.hasOwnProperty('streetAddress')) {\n      addressParts.push(profile.address.streetAddress);\n    }\n\n    if (profile.address.hasOwnProperty('addressLocality')) {\n      addressParts.push(profile.address.addressLocality);\n    }\n\n    if (profile.address.hasOwnProperty('postalCode')) {\n      addressParts.push(profile.address.postalCode);\n    }\n\n    if (profile.address.hasOwnProperty('addressCountry')) {\n      addressParts.push(profile.address.addressCountry);\n    }\n\n    if (addressParts.length) {\n      addressString = addressParts.join(', ');\n    }\n  }\n\n  return addressString;\n}\nexport function getBirthDate(profile) {\n  if (!profile) {\n    return null;\n  }\n\n  const monthNames = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  let birthDateString = null;\n\n  if (profile.hasOwnProperty('birthDate')) {\n    const date = new Date(profile.birthDate);\n    birthDateString = `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n  }\n\n  return birthDateString;\n}","map":{"version":3,"sources":["../../../src/profileSchemas/personUtils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["export function getName(profile) {\n    if (!profile) {\n        return null;\n    }\n    let name = null;\n    if (profile.name) {\n        name = profile.name;\n    }\n    else if (profile.givenName || profile.familyName) {\n        name = '';\n        if (profile.givenName) {\n            name = profile.givenName;\n        }\n        if (profile.familyName) {\n            name += ` ${profile.familyName}`;\n        }\n    }\n    return name;\n}\nexport function getGivenName(profile) {\n    if (!profile) {\n        return null;\n    }\n    let givenName = null;\n    if (profile.givenName) {\n        givenName = profile.givenName;\n    }\n    else if (profile.name) {\n        const nameParts = profile.name.split(' ');\n        givenName = nameParts.slice(0, -1).join(' ');\n    }\n    return givenName;\n}\nexport function getFamilyName(profile) {\n    if (!profile) {\n        return null;\n    }\n    let familyName = null;\n    if (profile.familyName) {\n        familyName = profile.familyName;\n    }\n    else if (profile.name) {\n        const nameParts = profile.name.split(' ');\n        familyName = nameParts.pop();\n    }\n    return familyName;\n}\nexport function getDescription(profile) {\n    if (!profile) {\n        return null;\n    }\n    let description = null;\n    if (profile.description) {\n        description = profile.description;\n    }\n    return description;\n}\nexport function getAvatarUrl(profile) {\n    if (!profile) {\n        return null;\n    }\n    let avatarContentUrl = null;\n    if (profile.image) {\n        profile.image.map((image) => {\n            if (image.name === 'avatar') {\n                avatarContentUrl = image.contentUrl;\n                return avatarContentUrl;\n            }\n            else {\n                return null;\n            }\n        });\n    }\n    return avatarContentUrl;\n}\nexport function getVerifiedAccounts(profile, verifications) {\n    if (!profile) {\n        return null;\n    }\n    const filteredAccounts = [];\n    if (profile.hasOwnProperty('account') && verifications) {\n        profile.account.map((account) => {\n            let accountIsValid = false;\n            let proofUrl = null;\n            verifications.map(verification => {\n                if (verification.hasOwnProperty('proof_url')) {\n                    verification.proofUrl = verification.proof_url;\n                }\n                if (verification.valid &&\n                    verification.service === account.service &&\n                    verification.identifier === account.identifier &&\n                    verification.proofUrl) {\n                    accountIsValid = true;\n                    proofUrl = verification.proofUrl;\n                    return true;\n                }\n                else {\n                    return false;\n                }\n            });\n            if (accountIsValid) {\n                account.proofUrl = proofUrl;\n                filteredAccounts.push(account);\n                return account;\n            }\n            else {\n                return null;\n            }\n        });\n    }\n    return filteredAccounts;\n}\nexport function getOrganizations(profile) {\n    if (!profile) {\n        return null;\n    }\n    const organizations = [];\n    if (profile.hasOwnProperty('worksFor')) {\n        return profile.worksFor;\n    }\n    return organizations;\n}\nexport function getConnections(profile) {\n    if (!profile) {\n        return null;\n    }\n    let connections = [];\n    if (profile.hasOwnProperty('knows')) {\n        connections = profile.knows;\n    }\n    return connections;\n}\nexport function getAddress(profile) {\n    if (!profile) {\n        return null;\n    }\n    let addressString = null;\n    if (profile.hasOwnProperty('address')) {\n        const addressParts = [];\n        if (profile.address.hasOwnProperty('streetAddress')) {\n            addressParts.push(profile.address.streetAddress);\n        }\n        if (profile.address.hasOwnProperty('addressLocality')) {\n            addressParts.push(profile.address.addressLocality);\n        }\n        if (profile.address.hasOwnProperty('postalCode')) {\n            addressParts.push(profile.address.postalCode);\n        }\n        if (profile.address.hasOwnProperty('addressCountry')) {\n            addressParts.push(profile.address.addressCountry);\n        }\n        if (addressParts.length) {\n            addressString = addressParts.join(', ');\n        }\n    }\n    return addressString;\n}\nexport function getBirthDate(profile) {\n    if (!profile) {\n        return null;\n    }\n    const monthNames = [\n        'January',\n        'February',\n        'March',\n        'April',\n        'May',\n        'June',\n        'July',\n        'August',\n        'September',\n        'October',\n        'November',\n        'December',\n    ];\n    let birthDateString = null;\n    if (profile.hasOwnProperty('birthDate')) {\n        const date = new Date(profile.birthDate);\n        birthDateString = `${monthNames[date.getMonth()]} ${date.getDate()}, ${date.getFullYear()}`;\n    }\n    return birthDateString;\n}\n//# sourceMappingURL=personUtils.js.map"]},"metadata":{},"sourceType":"module"}