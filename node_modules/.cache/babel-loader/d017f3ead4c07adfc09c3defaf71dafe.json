{"ast":null,"code":"import { asyncToGenerator as _asyncToGenerator, objectWithoutPropertiesLoose as _objectWithoutPropertiesLoose, extends as _extends } from '../_virtual/_rollupPluginBabelHelpers.js';\nimport _regeneratorRuntime from 'regenerator-runtime';\nimport { AppConfig, UserSession } from '@stacks/auth';\nimport { SECP256K1Client, TokenSigner } from 'jsontokens';\nimport { getStacksProvider } from '../utils.esm.js';\nimport { TransactionTypes } from '../types/transactions.esm.js';\nimport { serializeCV, ChainID, serializePostCondition, deserializeTransaction, BufferReader } from '@stacks/transactions';\nimport { StacksTestnet } from '@stacks/network';\nvar _excluded = [\"functionArgs\", \"appDetails\", \"userSession\"],\n    _excluded2 = [\"appDetails\", \"userSession\"],\n    _excluded3 = [\"amount\", \"appDetails\", \"userSession\"];\n\nvar getUserSession = function getUserSession(_userSession) {\n  var userSession = _userSession;\n\n  if (!userSession) {\n    var appConfig = new AppConfig([\"store_write\"], document.location.href);\n    userSession = new UserSession({\n      appConfig: appConfig\n    });\n  }\n\n  return userSession;\n};\n\nvar getKeys = function getKeys(_userSession) {\n  var userSession = getUserSession(_userSession);\n  var privateKey = userSession.loadUserData().appPrivateKey;\n  var publicKey = SECP256K1Client.derivePublicKey(privateKey);\n  return {\n    privateKey: privateKey,\n    publicKey: publicKey\n  };\n};\n\nfunction getStxAddress(options) {\n  var _userSession$loadUser, _chainIdToKey;\n\n  var stxAddress = options.stxAddress,\n      userSession = options.userSession,\n      network = options.network;\n  if (stxAddress) return stxAddress;\n  if (!userSession || !network) return void 0;\n  var stxAddresses = userSession == null ? void 0 : (_userSession$loadUser = userSession.loadUserData().profile) == null ? void 0 : _userSession$loadUser.stxAddress;\n  var chainIdToKey = (_chainIdToKey = {}, _chainIdToKey[ChainID.Mainnet] = \"mainnet\", _chainIdToKey[ChainID.Testnet] = \"testnet\", _chainIdToKey);\n  var address = stxAddresses == null ? void 0 : stxAddresses[chainIdToKey[network.chainId]];\n  return address;\n}\n\nfunction getDefaults(options) {\n  var network = options.network || new StacksTestnet();\n  var userSession = getUserSession(options.userSession);\n\n  var defaults = _extends({}, options, {\n    network: network,\n    userSession: userSession\n  });\n\n  return _extends({\n    stxAddress: getStxAddress(defaults)\n  }, defaults);\n}\n\nvar signPayload = /*#__PURE__*/function () {\n  var _ref = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(payload, privateKey) {\n    var postConditions, tokenSigner;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            postConditions = payload.postConditions;\n\n            if (postConditions && typeof postConditions[0] !== \"string\") {\n              postConditions = postConditions.map(function (pc) {\n                return serializePostCondition(pc).toString(\"hex\");\n              });\n            }\n\n            tokenSigner = new TokenSigner(\"ES256k\", privateKey);\n            return _context.abrupt(\"return\", tokenSigner.signAsync(_extends({}, payload, {\n              postConditions: postConditions\n            })));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function signPayload(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar openTransactionPopup = /*#__PURE__*/function () {\n  var _ref3 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(_ref2) {\n    var token, options, provider, txResponse, txRaw, txBuffer, stacksTransaction;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            token = _ref2.token, options = _ref2.options;\n            provider = getStacksProvider();\n\n            if (provider) {\n              _context2.next = 4;\n              break;\n            }\n\n            throw new Error(\"Hiro Wallet not installed.\");\n\n          case 4:\n            _context2.prev = 4;\n            _context2.next = 7;\n            return provider.transactionRequest(token);\n\n          case 7:\n            txResponse = _context2.sent;\n            txRaw = txResponse.txRaw;\n            txBuffer = Buffer.from(txRaw.replace(/^0x/, \"\"), \"hex\");\n            stacksTransaction = deserializeTransaction(new BufferReader(txBuffer));\n\n            if (!(\"sponsored\" in options && options.sponsored)) {\n              _context2.next = 14;\n              break;\n            }\n\n            options.onFinish == null ? void 0 : options.onFinish(_extends({}, txResponse, {\n              stacksTransaction: stacksTransaction\n            }));\n            return _context2.abrupt(\"return\");\n\n          case 14:\n            options.onFinish == null ? void 0 : options.onFinish(_extends({}, txResponse, {\n              stacksTransaction: stacksTransaction\n            }));\n            _context2.next = 21;\n            break;\n\n          case 17:\n            _context2.prev = 17;\n            _context2.t0 = _context2[\"catch\"](4);\n            console.error(\"[Connect] Error during transaction request\", _context2.t0);\n            options.onCancel == null ? void 0 : options.onCancel();\n\n          case 21:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[4, 17]]);\n  }));\n\n  return function openTransactionPopup(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\n\nvar makeContractCallToken = /*#__PURE__*/function () {\n  var _ref4 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(options) {\n    var functionArgs, appDetails, userSession, _options, _getKeys, privateKey, publicKey, args, payload;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            functionArgs = options.functionArgs, appDetails = options.appDetails, userSession = options.userSession, _options = _objectWithoutPropertiesLoose(options, _excluded);\n            _getKeys = getKeys(userSession), privateKey = _getKeys.privateKey, publicKey = _getKeys.publicKey;\n            args = functionArgs.map(function (arg) {\n              if (typeof arg === \"string\") {\n                return arg;\n              }\n\n              return serializeCV(arg).toString(\"hex\");\n            });\n            payload = _extends({}, _options, {\n              functionArgs: args,\n              txType: TransactionTypes.ContractCall,\n              publicKey: publicKey\n            });\n\n            if (appDetails) {\n              payload.appDetails = appDetails;\n            }\n\n            return _context3.abrupt(\"return\", signPayload(payload, privateKey));\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function makeContractCallToken(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();\n\nvar makeContractDeployToken = /*#__PURE__*/function () {\n  var _ref5 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(options) {\n    var appDetails, userSession, _options, _getKeys2, privateKey, publicKey, payload;\n\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            appDetails = options.appDetails, userSession = options.userSession, _options = _objectWithoutPropertiesLoose(options, _excluded2);\n            _getKeys2 = getKeys(userSession), privateKey = _getKeys2.privateKey, publicKey = _getKeys2.publicKey;\n            payload = _extends({}, _options, {\n              publicKey: publicKey,\n              txType: TransactionTypes.ContractDeploy\n            });\n\n            if (appDetails) {\n              payload.appDetails = appDetails;\n            }\n\n            return _context4.abrupt(\"return\", signPayload(payload, privateKey));\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function makeContractDeployToken(_x5) {\n    return _ref5.apply(this, arguments);\n  };\n}();\n\nvar makeSTXTransferToken = /*#__PURE__*/function () {\n  var _ref6 = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(options) {\n    var amount, appDetails, userSession, _options, _getKeys3, privateKey, publicKey, payload;\n\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            amount = options.amount, appDetails = options.appDetails, userSession = options.userSession, _options = _objectWithoutPropertiesLoose(options, _excluded3);\n            _getKeys3 = getKeys(userSession), privateKey = _getKeys3.privateKey, publicKey = _getKeys3.publicKey;\n            payload = _extends({}, _options, {\n              amount: amount.toString(10),\n              publicKey: publicKey,\n              txType: TransactionTypes.STXTransfer\n            });\n\n            if (appDetails) {\n              payload.appDetails = appDetails;\n            }\n\n            return _context5.abrupt(\"return\", signPayload(payload, privateKey));\n\n          case 5:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5);\n  }));\n\n  return function makeSTXTransferToken(_x6) {\n    return _ref6.apply(this, arguments);\n  };\n}();\n\nfunction generateTokenAndOpenPopup(_x7, _x8) {\n  return _generateTokenAndOpenPopup.apply(this, arguments);\n}\n\nfunction _generateTokenAndOpenPopup() {\n  _generateTokenAndOpenPopup = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(options, makeTokenFn) {\n    var token;\n    return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n      while (1) {\n        switch (_context6.prev = _context6.next) {\n          case 0:\n            _context6.next = 2;\n            return makeTokenFn(_extends({}, getDefaults(options), options));\n\n          case 2:\n            token = _context6.sent;\n            return _context6.abrupt(\"return\", openTransactionPopup({\n              token: token,\n              options: options\n            }));\n\n          case 4:\n          case \"end\":\n            return _context6.stop();\n        }\n      }\n    }, _callee6);\n  }));\n  return _generateTokenAndOpenPopup.apply(this, arguments);\n}\n\nfunction openContractCall(options) {\n  return generateTokenAndOpenPopup(options, makeContractCallToken);\n}\n\nfunction openContractDeploy(options) {\n  return generateTokenAndOpenPopup(options, makeContractDeployToken);\n}\n\nfunction openSTXTransfer(options) {\n  return generateTokenAndOpenPopup(options, makeSTXTransferToken);\n}\n\nexport { makeContractCallToken, makeContractDeployToken, makeSTXTransferToken, openContractCall, openContractDeploy, openSTXTransfer };","map":{"version":3,"sources":["../../src/transactions/index.ts"],"names":["getUserSession","userSession","_userSession","appConfig","document","getKeys","privateKey","appPrivateKey","publicKey","SECP256K1Client","stxAddress","network","options","stxAddresses","profile","chainIdToKey","ChainID","Mainnet","Testnet","address","chainId","defaults","getStxAddress","signPayload","postConditions","payload","serializePostCondition","tokenSigner","openTransactionPopup","token","provider","getStacksProvider","txResponse","txRaw","txBuffer","Buffer","stacksTransaction","deserializeTransaction","onFinish","error","onCancel","makeContractCallToken","functionArgs","appDetails","_options","args","arg","serializeCV","txType","TransactionTypes","makeContractDeployToken","ContractDeploy","makeSTXTransferToken","amount","STXTransfer","makeTokenFn","getDefaults","generateTokenAndOpenPopup"],"mappings":"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","sourcesContent":["import { UserSession, AppConfig } from '@stacks/auth';\nimport { SECP256K1Client, TokenSigner } from 'jsontokens';\nimport {\n  ContractCallOptions,\n  ContractCallPayload,\n  ContractDeployOptions,\n  ContractDeployPayload,\n  TransactionPopup,\n  TransactionOptions,\n  STXTransferOptions,\n  STXTransferPayload,\n  TransactionPayload,\n  TransactionTypes,\n  STXTransferSponsoredOptions,\n  STXTransferRegularOptions,\n  ContractDeployRegularOptions,\n  ContractDeploySponsoredOptions,\n  ContractCallRegularOptions,\n  ContractCallSponsoredOptions,\n  SponsoredFinishedTxPayload,\n  FinishedTxPayload,\n} from '../types/transactions';\nimport {\n  serializeCV,\n  ChainID,\n  deserializeTransaction,\n  BufferReader,\n  serializePostCondition,\n  PostCondition,\n} from '@stacks/transactions';\nimport { getStacksProvider } from '../utils';\nimport { StacksTestnet } from '@stacks/network';\n\nconst getUserSession = (_userSession?: UserSession) => {\n  let userSession = _userSession;\n\n  if (!userSession) {\n    const appConfig = new AppConfig(['store_write'], document.location.href);\n    userSession = new UserSession({ appConfig });\n  }\n  return userSession;\n};\n\nconst getKeys = (_userSession?: UserSession) => {\n  const userSession = getUserSession(_userSession);\n  const privateKey = userSession.loadUserData().appPrivateKey;\n  const publicKey = SECP256K1Client.derivePublicKey(privateKey);\n\n  return { privateKey, publicKey };\n};\n\nfunction getStxAddress(options: TransactionOptions) {\n  const { stxAddress, userSession, network } = options;\n\n  if (stxAddress) return stxAddress;\n  if (!userSession || !network) return undefined;\n  const stxAddresses = userSession?.loadUserData().profile?.stxAddress;\n  const chainIdToKey = {\n    [ChainID.Mainnet]: 'mainnet',\n    [ChainID.Testnet]: 'testnet',\n  };\n  const address: string | undefined = stxAddresses?.[chainIdToKey[network.chainId]];\n  return address;\n}\n\nfunction getDefaults(options: TransactionOptions) {\n  const network = options.network || new StacksTestnet();\n  const userSession = getUserSession(options.userSession);\n  const defaults: TransactionOptions = {\n    ...options,\n    network,\n    userSession,\n  };\n  return {\n    stxAddress: getStxAddress(defaults),\n    ...defaults,\n  };\n}\n\nconst signPayload = async (payload: TransactionPayload, privateKey: string) => {\n  let { postConditions } = payload;\n  if (postConditions && typeof postConditions[0] !== 'string') {\n    postConditions = (postConditions as PostCondition[]).map(pc =>\n      serializePostCondition(pc).toString('hex')\n    );\n  }\n  const tokenSigner = new TokenSigner('ES256k', privateKey);\n  return tokenSigner.signAsync({\n    ...payload,\n    postConditions,\n  } as any);\n};\n\nconst openTransactionPopup = async ({ token, options }: TransactionPopup) => {\n  const provider = getStacksProvider();\n  if (!provider) {\n    throw new Error('Hiro Wallet not installed.');\n  }\n\n  try {\n    const txResponse = await provider.transactionRequest(token);\n    const { txRaw } = txResponse;\n    const txBuffer = Buffer.from(txRaw.replace(/^0x/, ''), 'hex');\n    const stacksTransaction = deserializeTransaction(new BufferReader(txBuffer));\n\n    if ('sponsored' in options && options.sponsored) {\n      options.onFinish?.({\n        ...(txResponse as SponsoredFinishedTxPayload),\n        stacksTransaction,\n      });\n      return;\n    }\n    options.onFinish?.({\n      ...(txResponse as FinishedTxPayload),\n      stacksTransaction,\n    });\n  } catch (error) {\n    console.error('[Connect] Error during transaction request', error);\n    options.onCancel?.();\n  }\n};\n\nexport const makeContractCallToken = async (options: ContractCallOptions) => {\n  const { functionArgs, appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const args: string[] = functionArgs.map(arg => {\n    if (typeof arg === 'string') {\n      return arg;\n    }\n    return serializeCV(arg).toString('hex');\n  });\n\n  const payload: ContractCallPayload = {\n    ..._options,\n    functionArgs: args,\n    txType: TransactionTypes.ContractCall,\n    publicKey,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nexport const makeContractDeployToken = async (options: ContractDeployOptions) => {\n  const { appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const payload: ContractDeployPayload = {\n    ..._options,\n    publicKey,\n    txType: TransactionTypes.ContractDeploy,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nexport const makeSTXTransferToken = async (options: STXTransferOptions) => {\n  const { amount, appDetails, userSession, ..._options } = options;\n  const { privateKey, publicKey } = getKeys(userSession);\n\n  const payload: STXTransferPayload = {\n    ..._options,\n    amount: amount.toString(10),\n    publicKey,\n    txType: TransactionTypes.STXTransfer,\n  };\n\n  if (appDetails) {\n    payload.appDetails = appDetails;\n  }\n\n  return signPayload(payload, privateKey);\n};\n\nasync function generateTokenAndOpenPopup<T extends TransactionOptions>(\n  options: T,\n  makeTokenFn: (options: T) => Promise<string>\n) {\n  const token = await makeTokenFn({\n    ...getDefaults(options),\n    ...options,\n  } as T);\n  return openTransactionPopup({ token, options });\n}\n\nexport function openContractCall(options: ContractCallRegularOptions): Promise<void>;\nexport function openContractCall(options: ContractCallSponsoredOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions): Promise<void>;\nexport function openContractCall(options: ContractCallOptions) {\n  return generateTokenAndOpenPopup(options, makeContractCallToken);\n}\n\nexport function openContractDeploy(options: ContractDeployRegularOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeploySponsoredOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions): Promise<void>;\nexport function openContractDeploy(options: ContractDeployOptions) {\n  return generateTokenAndOpenPopup(options, makeContractDeployToken);\n}\n\nexport function openSTXTransfer(options: STXTransferRegularOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferSponsoredOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions): Promise<void>;\nexport function openSTXTransfer(options: STXTransferOptions) {\n  return generateTokenAndOpenPopup(options, makeSTXTransferToken);\n}\n"]},"metadata":{},"sourceType":"module"}