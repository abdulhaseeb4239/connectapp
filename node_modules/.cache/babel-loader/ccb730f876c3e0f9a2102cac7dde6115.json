{"ast":null,"code":"import { signProfileToken, extractProfile } from './profileTokens';\nimport { getPersonFromLegacyFormat } from './profileSchemas';\nimport { getName, getFamilyName, getGivenName, getAvatarUrl, getDescription, getVerifiedAccounts, getAddress, getBirthDate, getConnections, getOrganizations } from './profileSchemas/personUtils';\nimport { makeZoneFile, parseZoneFile } from 'zone-file';\nimport * as inspector from 'schema-inspector';\nimport { Logger, fetchPrivate } from '@stacks/common';\nconst schemaDefinition = {\n  type: 'object',\n  properties: {\n    '@context': {\n      type: 'string',\n      optional: true\n    },\n    '@type': {\n      type: 'string'\n    }\n  }\n};\nexport class Profile {\n  constructor(profile = {}) {\n    this._profile = Object.assign({}, {\n      '@context': 'http://schema.org/'\n    }, profile);\n  }\n\n  toJSON() {\n    return Object.assign({}, this._profile);\n  }\n\n  toToken(privateKey) {\n    return signProfileToken(this.toJSON(), privateKey);\n  }\n\n  static validateSchema(profile, strict = false) {\n    schemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token, publicKeyOrAddress = null) {\n    const profile = extractProfile(token, publicKeyOrAddress);\n    return new Profile(profile);\n  }\n\n  static makeZoneFile(domainName, tokenFileURL) {\n    return makeProfileZoneFile(domainName, tokenFileURL);\n  }\n\n}\nconst personSchemaDefinition = {\n  type: 'object',\n  strict: false,\n  properties: {\n    '@context': {\n      type: 'string',\n      optional: true\n    },\n    '@type': {\n      type: 'string'\n    },\n    '@id': {\n      type: 'string',\n      optional: true\n    },\n    name: {\n      type: 'string',\n      optional: true\n    },\n    givenName: {\n      type: 'string',\n      optional: true\n    },\n    familyName: {\n      type: 'string',\n      optional: true\n    },\n    description: {\n      type: 'string',\n      optional: true\n    },\n    image: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          name: {\n            type: 'string',\n            optional: true\n          },\n          contentUrl: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    website: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          url: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    account: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          service: {\n            type: 'string',\n            optional: true\n          },\n          identifier: {\n            type: 'string',\n            optional: true\n          },\n          proofType: {\n            type: 'string',\n            optional: true\n          },\n          proofUrl: {\n            type: 'string',\n            optional: true\n          },\n          proofMessage: {\n            type: 'string',\n            optional: true\n          },\n          proofSignature: {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    worksFor: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          '@id': {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    knows: {\n      type: 'array',\n      optional: true,\n      items: {\n        type: 'object',\n        properties: {\n          '@type': {\n            type: 'string'\n          },\n          '@id': {\n            type: 'string',\n            optional: true\n          }\n        }\n      }\n    },\n    address: {\n      type: 'object',\n      optional: true,\n      properties: {\n        '@type': {\n          type: 'string'\n        },\n        streetAddress: {\n          type: 'string',\n          optional: true\n        },\n        addressLocality: {\n          type: 'string',\n          optional: true\n        },\n        postalCode: {\n          type: 'string',\n          optional: true\n        },\n        addressCountry: {\n          type: 'string',\n          optional: true\n        }\n      }\n    },\n    birthDate: {\n      type: 'string',\n      optional: true\n    },\n    taxID: {\n      type: 'string',\n      optional: true\n    }\n  }\n};\nexport class Person extends Profile {\n  constructor(profile = {}) {\n    super(profile);\n    this._profile = Object.assign({}, {\n      '@type': 'Person'\n    }, this._profile);\n  }\n\n  static validateSchema(profile, strict = false) {\n    personSchemaDefinition.strict = strict;\n    return inspector.validate(schemaDefinition, profile);\n  }\n\n  static fromToken(token, publicKeyOrAddress = null) {\n    const profile = extractProfile(token, publicKeyOrAddress);\n    return new Person(profile);\n  }\n\n  static fromLegacyFormat(legacyProfile) {\n    const profile = getPersonFromLegacyFormat(legacyProfile);\n    return new Person(profile);\n  }\n\n  toJSON() {\n    return {\n      profile: this.profile(),\n      name: this.name(),\n      givenName: this.givenName(),\n      familyName: this.familyName(),\n      description: this.description(),\n      avatarUrl: this.avatarUrl(),\n      verifiedAccounts: this.verifiedAccounts(),\n      address: this.address(),\n      birthDate: this.birthDate(),\n      connections: this.connections(),\n      organizations: this.organizations()\n    };\n  }\n\n  profile() {\n    return Object.assign({}, this._profile);\n  }\n\n  name() {\n    return getName(this.profile());\n  }\n\n  givenName() {\n    return getGivenName(this.profile());\n  }\n\n  familyName() {\n    return getFamilyName(this.profile());\n  }\n\n  description() {\n    return getDescription(this.profile());\n  }\n\n  avatarUrl() {\n    return getAvatarUrl(this.profile());\n  }\n\n  verifiedAccounts(verifications) {\n    return getVerifiedAccounts(this.profile(), verifications);\n  }\n\n  address() {\n    return getAddress(this.profile());\n  }\n\n  birthDate() {\n    return getBirthDate(this.profile());\n  }\n\n  connections() {\n    return getConnections(this.profile());\n  }\n\n  organizations() {\n    return getOrganizations(this.profile());\n  }\n\n}\nexport function makeProfileZoneFile(origin, tokenFileUrl) {\n  if (!tokenFileUrl.includes('://')) {\n    throw new Error('Invalid token file url');\n  }\n\n  const urlScheme = tokenFileUrl.split('://')[0];\n  const urlParts = tokenFileUrl.split('://')[1].split('/');\n  const domain = urlParts[0];\n  const pathname = `/${urlParts.slice(1).join('/')}`;\n  const zoneFile = {\n    $origin: origin,\n    $ttl: 3600,\n    uri: [{\n      name: '_http._tcp',\n      priority: 10,\n      weight: 1,\n      target: `${urlScheme}://${domain}${pathname}`\n    }]\n  };\n  const zoneFileTemplate = '{$origin}\\n{$ttl}\\n{uri}\\n';\n  return makeZoneFile(zoneFile, zoneFileTemplate);\n}\nexport function getTokenFileUrl(zoneFileJson) {\n  if (!zoneFileJson.hasOwnProperty('uri')) {\n    return null;\n  }\n\n  if (!Array.isArray(zoneFileJson.uri)) {\n    return null;\n  }\n\n  if (zoneFileJson.uri.length < 1) {\n    return null;\n  }\n\n  const firstUriRecord = zoneFileJson.uri[0];\n\n  if (!firstUriRecord.hasOwnProperty('target')) {\n    return null;\n  }\n\n  let tokenFileUrl = firstUriRecord.target;\n\n  if (tokenFileUrl.startsWith('https')) {} else if (tokenFileUrl.startsWith('http')) {} else {\n    tokenFileUrl = `https://${tokenFileUrl}`;\n  }\n\n  return tokenFileUrl;\n}\nexport function resolveZoneFileToProfile(zoneFile, publicKeyOrAddress) {\n  return new Promise((resolve, reject) => {\n    let zoneFileJson = null;\n\n    try {\n      zoneFileJson = parseZoneFile(zoneFile);\n\n      if (!zoneFileJson.hasOwnProperty('$origin')) {\n        zoneFileJson = null;\n      }\n    } catch (e) {\n      reject(e);\n    }\n\n    let tokenFileUrl = null;\n\n    if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n      tokenFileUrl = getTokenFileUrl(zoneFileJson);\n    } else {\n      let profile = null;\n\n      try {\n        profile = JSON.parse(zoneFile);\n        profile = Person.fromLegacyFormat(profile).profile();\n      } catch (error) {\n        reject(error);\n      }\n\n      resolve(profile);\n      return;\n    }\n\n    if (tokenFileUrl) {\n      fetchPrivate(tokenFileUrl).then(response => response.text()).then(responseText => JSON.parse(responseText)).then(responseJson => {\n        const tokenRecords = responseJson;\n        const profile = extractProfile(tokenRecords[0].token, publicKeyOrAddress);\n        resolve(profile);\n      }).catch(error => {\n        Logger.error(`resolveZoneFileToProfile: error fetching token file ${tokenFileUrl}: ${error}`);\n        reject(error);\n      });\n    } else {\n      Logger.debug('Token file url not found. Resolving to blank profile.');\n      resolve({});\n    }\n  });\n}","map":{"version":3,"sources":["../../src/profile.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import { signProfileToken, extractProfile } from './profileTokens';\nimport { getPersonFromLegacyFormat } from './profileSchemas';\nimport { getName, getFamilyName, getGivenName, getAvatarUrl, getDescription, getVerifiedAccounts, getAddress, getBirthDate, getConnections, getOrganizations, } from './profileSchemas/personUtils';\nimport { makeZoneFile, parseZoneFile } from 'zone-file';\nimport * as inspector from 'schema-inspector';\nimport { Logger, fetchPrivate } from '@stacks/common';\nconst schemaDefinition = {\n    type: 'object',\n    properties: {\n        '@context': { type: 'string', optional: true },\n        '@type': { type: 'string' },\n    },\n};\nexport class Profile {\n    constructor(profile = {}) {\n        this._profile = Object.assign({}, {\n            '@context': 'http://schema.org/',\n        }, profile);\n    }\n    toJSON() {\n        return Object.assign({}, this._profile);\n    }\n    toToken(privateKey) {\n        return signProfileToken(this.toJSON(), privateKey);\n    }\n    static validateSchema(profile, strict = false) {\n        schemaDefinition.strict = strict;\n        return inspector.validate(schemaDefinition, profile);\n    }\n    static fromToken(token, publicKeyOrAddress = null) {\n        const profile = extractProfile(token, publicKeyOrAddress);\n        return new Profile(profile);\n    }\n    static makeZoneFile(domainName, tokenFileURL) {\n        return makeProfileZoneFile(domainName, tokenFileURL);\n    }\n}\nconst personSchemaDefinition = {\n    type: 'object',\n    strict: false,\n    properties: {\n        '@context': { type: 'string', optional: true },\n        '@type': { type: 'string' },\n        '@id': { type: 'string', optional: true },\n        name: { type: 'string', optional: true },\n        givenName: { type: 'string', optional: true },\n        familyName: { type: 'string', optional: true },\n        description: { type: 'string', optional: true },\n        image: {\n            type: 'array',\n            optional: true,\n            items: {\n                type: 'object',\n                properties: {\n                    '@type': { type: 'string' },\n                    name: { type: 'string', optional: true },\n                    contentUrl: { type: 'string', optional: true },\n                },\n            },\n        },\n        website: {\n            type: 'array',\n            optional: true,\n            items: {\n                type: 'object',\n                properties: {\n                    '@type': { type: 'string' },\n                    url: { type: 'string', optional: true },\n                },\n            },\n        },\n        account: {\n            type: 'array',\n            optional: true,\n            items: {\n                type: 'object',\n                properties: {\n                    '@type': { type: 'string' },\n                    service: { type: 'string', optional: true },\n                    identifier: { type: 'string', optional: true },\n                    proofType: { type: 'string', optional: true },\n                    proofUrl: { type: 'string', optional: true },\n                    proofMessage: { type: 'string', optional: true },\n                    proofSignature: { type: 'string', optional: true },\n                },\n            },\n        },\n        worksFor: {\n            type: 'array',\n            optional: true,\n            items: {\n                type: 'object',\n                properties: {\n                    '@type': { type: 'string' },\n                    '@id': { type: 'string', optional: true },\n                },\n            },\n        },\n        knows: {\n            type: 'array',\n            optional: true,\n            items: {\n                type: 'object',\n                properties: {\n                    '@type': { type: 'string' },\n                    '@id': { type: 'string', optional: true },\n                },\n            },\n        },\n        address: {\n            type: 'object',\n            optional: true,\n            properties: {\n                '@type': { type: 'string' },\n                streetAddress: { type: 'string', optional: true },\n                addressLocality: { type: 'string', optional: true },\n                postalCode: { type: 'string', optional: true },\n                addressCountry: { type: 'string', optional: true },\n            },\n        },\n        birthDate: { type: 'string', optional: true },\n        taxID: { type: 'string', optional: true },\n    },\n};\nexport class Person extends Profile {\n    constructor(profile = {}) {\n        super(profile);\n        this._profile = Object.assign({}, {\n            '@type': 'Person',\n        }, this._profile);\n    }\n    static validateSchema(profile, strict = false) {\n        personSchemaDefinition.strict = strict;\n        return inspector.validate(schemaDefinition, profile);\n    }\n    static fromToken(token, publicKeyOrAddress = null) {\n        const profile = extractProfile(token, publicKeyOrAddress);\n        return new Person(profile);\n    }\n    static fromLegacyFormat(legacyProfile) {\n        const profile = getPersonFromLegacyFormat(legacyProfile);\n        return new Person(profile);\n    }\n    toJSON() {\n        return {\n            profile: this.profile(),\n            name: this.name(),\n            givenName: this.givenName(),\n            familyName: this.familyName(),\n            description: this.description(),\n            avatarUrl: this.avatarUrl(),\n            verifiedAccounts: this.verifiedAccounts(),\n            address: this.address(),\n            birthDate: this.birthDate(),\n            connections: this.connections(),\n            organizations: this.organizations(),\n        };\n    }\n    profile() {\n        return Object.assign({}, this._profile);\n    }\n    name() {\n        return getName(this.profile());\n    }\n    givenName() {\n        return getGivenName(this.profile());\n    }\n    familyName() {\n        return getFamilyName(this.profile());\n    }\n    description() {\n        return getDescription(this.profile());\n    }\n    avatarUrl() {\n        return getAvatarUrl(this.profile());\n    }\n    verifiedAccounts(verifications) {\n        return getVerifiedAccounts(this.profile(), verifications);\n    }\n    address() {\n        return getAddress(this.profile());\n    }\n    birthDate() {\n        return getBirthDate(this.profile());\n    }\n    connections() {\n        return getConnections(this.profile());\n    }\n    organizations() {\n        return getOrganizations(this.profile());\n    }\n}\nexport function makeProfileZoneFile(origin, tokenFileUrl) {\n    if (!tokenFileUrl.includes('://')) {\n        throw new Error('Invalid token file url');\n    }\n    const urlScheme = tokenFileUrl.split('://')[0];\n    const urlParts = tokenFileUrl.split('://')[1].split('/');\n    const domain = urlParts[0];\n    const pathname = `/${urlParts.slice(1).join('/')}`;\n    const zoneFile = {\n        $origin: origin,\n        $ttl: 3600,\n        uri: [\n            {\n                name: '_http._tcp',\n                priority: 10,\n                weight: 1,\n                target: `${urlScheme}://${domain}${pathname}`,\n            },\n        ],\n    };\n    const zoneFileTemplate = '{$origin}\\n{$ttl}\\n{uri}\\n';\n    return makeZoneFile(zoneFile, zoneFileTemplate);\n}\nexport function getTokenFileUrl(zoneFileJson) {\n    if (!zoneFileJson.hasOwnProperty('uri')) {\n        return null;\n    }\n    if (!Array.isArray(zoneFileJson.uri)) {\n        return null;\n    }\n    if (zoneFileJson.uri.length < 1) {\n        return null;\n    }\n    const firstUriRecord = zoneFileJson.uri[0];\n    if (!firstUriRecord.hasOwnProperty('target')) {\n        return null;\n    }\n    let tokenFileUrl = firstUriRecord.target;\n    if (tokenFileUrl.startsWith('https')) {\n    }\n    else if (tokenFileUrl.startsWith('http')) {\n    }\n    else {\n        tokenFileUrl = `https://${tokenFileUrl}`;\n    }\n    return tokenFileUrl;\n}\nexport function resolveZoneFileToProfile(zoneFile, publicKeyOrAddress) {\n    return new Promise((resolve, reject) => {\n        let zoneFileJson = null;\n        try {\n            zoneFileJson = parseZoneFile(zoneFile);\n            if (!zoneFileJson.hasOwnProperty('$origin')) {\n                zoneFileJson = null;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        let tokenFileUrl = null;\n        if (zoneFileJson && Object.keys(zoneFileJson).length > 0) {\n            tokenFileUrl = getTokenFileUrl(zoneFileJson);\n        }\n        else {\n            let profile = null;\n            try {\n                profile = JSON.parse(zoneFile);\n                profile = Person.fromLegacyFormat(profile).profile();\n            }\n            catch (error) {\n                reject(error);\n            }\n            resolve(profile);\n            return;\n        }\n        if (tokenFileUrl) {\n            fetchPrivate(tokenFileUrl)\n                .then(response => response.text())\n                .then(responseText => JSON.parse(responseText))\n                .then(responseJson => {\n                const tokenRecords = responseJson;\n                const profile = extractProfile(tokenRecords[0].token, publicKeyOrAddress);\n                resolve(profile);\n            })\n                .catch(error => {\n                Logger.error(`resolveZoneFileToProfile: error fetching token file ${tokenFileUrl}: ${error}`);\n                reject(error);\n            });\n        }\n        else {\n            Logger.debug('Token file url not found. Resolving to blank profile.');\n            resolve({});\n        }\n    });\n}\n//# sourceMappingURL=profile.js.map"]},"metadata":{},"sourceType":"module"}